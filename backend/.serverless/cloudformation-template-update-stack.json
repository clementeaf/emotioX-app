{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "RegisterUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-registerUser"
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getAllUsers"
      }
    },
    "GetUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getUserById"
      }
    },
    "DeleteUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteUserById"
      }
    },
    "UpdateUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateUserById"
      }
    },
    "LoginUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-loginUser"
      }
    },
    "LogoutUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-logoutUser"
      }
    },
    "RefreshTokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refreshToken"
      }
    },
    "CreateResearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createResearch"
      }
    },
    "GeneratePresignedUrlsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-generatePresignedUrls"
      }
    },
    "ConnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-connect"
      }
    },
    "DisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-disconnect"
      }
    },
    "DefaultHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-defaultHandler"
      }
    },
    "SendMessageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendMessage"
      }
    },
    "RefreshLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refresh"
      }
    },
    "SendTemporaryPasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendTemporaryPassword"
      }
    },
    "UploadFilesToS3LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-uploadFilesToS3"
      }
    },
    "CreateScreenerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createScreener"
      }
    },
    "GetScreenerByResearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getScreenerByResearch"
      }
    },
    "UpdateScreenerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateScreener"
      }
    },
    "DeleteScreenerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteScreener"
      }
    },
    "CreateWelcomeScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createWelcomeScreen"
      }
    },
    "GetWelcomeScreenByResearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getWelcomeScreenByResearch"
      }
    },
    "UpdateWelcomeScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateWelcomeScreen"
      }
    },
    "DeleteWelcomeScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteWelcomeScreen"
      }
    },
    "CreateImplicitAssociationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createImplicitAssociation"
      }
    },
    "GetImplicitAssociationByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getImplicitAssociationById"
      }
    },
    "UpdateImplicitAssociationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateImplicitAssociation"
      }
    },
    "DeleteImplicitAssociationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteImplicitAssociation"
      }
    },
    "CreateCognitiveTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createCognitiveTask"
      }
    },
    "GetCognitiveTaskByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getCognitiveTaskById"
      }
    },
    "UpdateCognitiveTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateCognitiveTask"
      }
    },
    "DeleteCognitiveTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteCognitiveTask"
      }
    },
    "CreateEyeTrackingTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createEyeTrackingTask"
      }
    },
    "GetEyeTrackingTaskByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getEyeTrackingTaskById"
      }
    },
    "UpdateEyeTrackingTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateEyeTrackingTask"
      }
    },
    "DeleteEyeTrackingTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteEyeTrackingTask"
      }
    },
    "CreateThankYouScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createThankYouScreen"
      }
    },
    "GetThankYouScreenByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getThankYouScreenById"
      }
    },
    "UpdateThankYouScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateThankYouScreen"
      }
    },
    "DeleteThankYouScreenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteThankYouScreen"
      }
    },
    "CreateRecruitmentLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createRecruitmentLink"
      }
    },
    "GetAllRecruitmentLinksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getAllRecruitmentLinks"
      }
    },
    "GetRecruitmentLinkByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getRecruitmentLinkById"
      }
    },
    "UpdateRecruitmentLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateRecruitmentLink"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "emotio-x-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/@connections/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/emotio-x-backend-dev-WebSocketConnections"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket",
                    "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "emotio-x-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RegisterUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.registerUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-registerUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterUserLogGroup"
      ]
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.getAllUsers",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "GetUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.getUserById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getUserById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserByIdLogGroup"
      ]
    },
    "DeleteUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.deleteUserById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteUserById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserByIdLogGroup"
      ]
    },
    "UpdateUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.updateUserById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateUserById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserByIdLogGroup"
      ]
    },
    "LoginUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.loginUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-loginUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginUserLogGroup"
      ]
    },
    "LogoutUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.logoutUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-logoutUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogoutUserLogGroup"
      ]
    },
    "RefreshTokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.refreshToken",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-refreshToken",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RefreshTokenLogGroup"
      ]
    },
    "CreateResearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/createResearchController.createResearchWithImages",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createResearch",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateResearchLogGroup"
      ]
    },
    "GeneratePresignedUrlsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/imageController.uploadFilesToS3",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-generatePresignedUrls",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GeneratePresignedUrlsLogGroup"
      ]
    },
    "ConnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/websocket/connectHandler.connectHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-connect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConnectLogGroup"
      ]
    },
    "DisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/websocket/disconnectHandler.disconnectHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-disconnect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DisconnectLogGroup"
      ]
    },
    "DefaultHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/websocket/defaultHandler.defaultHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-defaultHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefaultHandlerLogGroup"
      ]
    },
    "SendMessageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/websocket/sendMessageHandler.sendMessageHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-sendMessage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendMessageLogGroup"
      ]
    },
    "RefreshLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "src/websocket/refreshHandler.refreshHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-refresh",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RefreshLogGroup"
      ]
    },
    "SendTemporaryPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/controller.sendTemporaryPassword",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-sendTemporaryPassword",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendTemporaryPasswordLogGroup"
      ]
    },
    "UploadFilesToS3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/imageController.uploadFilesToS3",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-uploadFilesToS3",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadFilesToS3LogGroup"
      ]
    },
    "CreateScreenerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/screenerController.createScreener",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createScreener",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateScreenerLogGroup"
      ]
    },
    "GetScreenerByResearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/screenerController.getScreenerByResearch",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getScreenerByResearch",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetScreenerByResearchLogGroup"
      ]
    },
    "UpdateScreenerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/screenerController.updateScreener",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateScreener",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateScreenerLogGroup"
      ]
    },
    "DeleteScreenerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/screenerController.deleteScreener",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteScreener",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteScreenerLogGroup"
      ]
    },
    "CreateWelcomeScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/welcomeScreenController.createWelcomeScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createWelcomeScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateWelcomeScreenLogGroup"
      ]
    },
    "GetWelcomeScreenByResearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/welcomeScreenController.getWelcomeScreenByResearch",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getWelcomeScreenByResearch",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetWelcomeScreenByResearchLogGroup"
      ]
    },
    "UpdateWelcomeScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/welcomeScreenController.updateWelcomeScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateWelcomeScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateWelcomeScreenLogGroup"
      ]
    },
    "DeleteWelcomeScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/welcomeScreenController.deleteWelcomeScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteWelcomeScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteWelcomeScreenLogGroup"
      ]
    },
    "CreateImplicitAssociationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/implicitAssociationController.createImplicitAssociation",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createImplicitAssociation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateImplicitAssociationLogGroup"
      ]
    },
    "GetImplicitAssociationByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/implicitAssociationController.getImplicitAssociationById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getImplicitAssociationById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetImplicitAssociationByIdLogGroup"
      ]
    },
    "UpdateImplicitAssociationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/implicitAssociationController.updateImplicitAssociation",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateImplicitAssociation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateImplicitAssociationLogGroup"
      ]
    },
    "DeleteImplicitAssociationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/implicitAssociationController.deleteImplicitAssociation",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteImplicitAssociation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteImplicitAssociationLogGroup"
      ]
    },
    "CreateCognitiveTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/cognitiveTaskController.createCognitiveTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createCognitiveTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCognitiveTaskLogGroup"
      ]
    },
    "GetCognitiveTaskByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/cognitiveTaskController.getCognitiveTaskById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getCognitiveTaskById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCognitiveTaskByIdLogGroup"
      ]
    },
    "UpdateCognitiveTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/cognitiveTaskController.updateCognitiveTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateCognitiveTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCognitiveTaskLogGroup"
      ]
    },
    "DeleteCognitiveTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/cognitiveTaskController.deleteCognitiveTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteCognitiveTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCognitiveTaskLogGroup"
      ]
    },
    "CreateEyeTrackingTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/eyeTrackingController.createEyeTrackingTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createEyeTrackingTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateEyeTrackingTaskLogGroup"
      ]
    },
    "GetEyeTrackingTaskByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/eyeTrackingController.getEyeTrackingTaskById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getEyeTrackingTaskById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEyeTrackingTaskByIdLogGroup"
      ]
    },
    "UpdateEyeTrackingTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/eyeTrackingController.updateEyeTrackingTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateEyeTrackingTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEyeTrackingTaskLogGroup"
      ]
    },
    "DeleteEyeTrackingTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/eyeTrackingController.deleteEyeTrackingTask",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteEyeTrackingTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteEyeTrackingTaskLogGroup"
      ]
    },
    "CreateThankYouScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/thankYouScreenController.createThankYouScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createThankYouScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateThankYouScreenLogGroup"
      ]
    },
    "GetThankYouScreenByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/thankYouScreenController.getThankYouScreenById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getThankYouScreenById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetThankYouScreenByIdLogGroup"
      ]
    },
    "UpdateThankYouScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/thankYouScreenController.updateThankYouScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateThankYouScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateThankYouScreenLogGroup"
      ]
    },
    "DeleteThankYouScreenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/thankYouScreenController.deleteThankYouScreen",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-deleteThankYouScreen",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteThankYouScreenLogGroup"
      ]
    },
    "CreateRecruitmentLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/recruitmentLinkController.createRecruitmentLink",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-createRecruitmentLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateRecruitmentLinkLogGroup"
      ]
    },
    "GetAllRecruitmentLinksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/recruitmentLinkController.getAllRecruitmentLinks",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getAllRecruitmentLinks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllRecruitmentLinksLogGroup"
      ]
    },
    "GetRecruitmentLinkByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/recruitmentLinkController.getRecruitmentLinkById",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-getRecruitmentLinkById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetRecruitmentLinkByIdLogGroup"
      ]
    },
    "UpdateRecruitmentLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/emotio-x-backend.zip"
        },
        "Handler": "dist/controllers/recruitmentLinkController.updateRecruitmentLink",
        "Runtime": "nodejs18.x",
        "FunctionName": "emotio-x-backend-dev-updateRecruitmentLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
            "WEBSOCKET_ENDPOINT": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateRecruitmentLinkLogGroup"
      ]
    },
    "RegisterUserLambdaVersionebSJNchUh30j6uIfepufjRUnYaynK8pXPsXXf7QyOQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterUserLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetAllUsersLambdaVersionNR2zYFPlfrWEuXIEo2YMapJXsQ9jPc3iRmXFBwvreo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetUserByIdLambdaVersionc3FAgRBuouWhbRrnYyFiUcufVynprVuOihsMrV524dc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteUserByIdLambdaVersionjgz3MlHyk87gIRVN21uWFP2DB8vhbRe1JlvNCjVEXGo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateUserByIdLambdaVersion3zX8d5QTLFneaeQ04hwP112OqIQtU7E9aCeI8J1Mw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "LoginUserLambdaVersionMwDICWraYdk5Bx78xOI0AuhinK6aPr4K3sw1wTqCg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginUserLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "LogoutUserLambdaVersionNhWyFeUMEy89pwAYovJzNdQDfUvQfn9QGQSnQXyR9w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LogoutUserLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "RefreshTokenLambdaVersion90pjxA867CXQr2Q8xVnwA3Df2DTp9VbE4buDXTSIHw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RefreshTokenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateResearchLambdaVersionBc68a8mOU1tzxKRLOtY0MJ8p4tgdZOAoj2PK6jXFTY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateResearchLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GeneratePresignedUrlsLambdaVersion7LYbEeX7n3eOsE2B6OkoUDlxBYQjdSBemzzXxFcfRk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GeneratePresignedUrlsLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "ConnectLambdaVersionTUeD0PTE4fIb2qNmmKGVDwcaS1zZRkXtbV7ftyrBY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConnectLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DisconnectLambdaVersionRV81E55ER86qtgqhsq8xvxFBGTyt5ODn8ZOP0hEXkVo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DefaultHandlerLambdaVersionNDUsKzdktelSWh1vA0ci5SGbR6f9UKOvJME2rkV08": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefaultHandlerLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "SendMessageLambdaVersioneYe1q28KUSxB9fRE7DUbc4OathP4tGgpeXcgnLxzpI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendMessageLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "RefreshLambdaVersion7iw9cj46720DGRVQUvf8us1ouPYndGnN7wgXfmDkE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RefreshLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "SendTemporaryPasswordLambdaVersionZLKLzhLNlFlvtjSg66rH0RNPjVLXWI7PXGthHOgk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendTemporaryPasswordLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UploadFilesToS3LambdaVersionVkKVdZ2a9yNMrsn9FxMnaMiFBm1VIO6e39hRlffXhI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadFilesToS3LambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateScreenerLambdaVersionjrafmBU4NdQVbd9x2cYHrVAlrwtYzPbx4MEtZ7cGw8o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateScreenerLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetScreenerByResearchLambdaVersionKxwCVepewW744iBd2t2MFD320MIonBkGBPeZdBqFgnY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetScreenerByResearchLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateScreenerLambdaVersionguKCCeXTIJCZHLTNJGLbuVZww5bAJatHA2NdVsMjg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateScreenerLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteScreenerLambdaVersionbLoXNorxi98dbUEoBPPMqWjimBpU4uD7ZGx0sTFw2w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteScreenerLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateWelcomeScreenLambdaVersionxIvdGGjPRjXJzdy2sEBlJzuejnQFDmm8EmCkiZgA9o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateWelcomeScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetWelcomeScreenByResearchLambdaVersion1TMgLaVNxWmNL7mOpLvtNtwLtjfr6OQfWmMO9nI7Y0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetWelcomeScreenByResearchLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateWelcomeScreenLambdaVersionNVaUoye63KMQAwsFZRAJx4BUihADlfpgBXwckefo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateWelcomeScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteWelcomeScreenLambdaVersionkdk8Uv6UIdBfN1TOIQINx9B1ITT7Ypdo3Bd4FdabLo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteWelcomeScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateImplicitAssociationLambdaVersionW3i2G8LcegG8ZzMKDcaN6lPGnCPtzGNZTrEYk1QSRFQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateImplicitAssociationLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetImplicitAssociationByIdLambdaVersionYb94hMbnCwRFZdVaUuBpw734lsEhruRCTtfrtGeec": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetImplicitAssociationByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateImplicitAssociationLambdaVersion1zVdga3W4ux6lDJg4dLYK9ICYqkJDq3h82FziGgLLy4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateImplicitAssociationLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteImplicitAssociationLambdaVersionbyayCcYp4rlQPnLO8bG32zkYKvefpE2qLsytiObfTg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteImplicitAssociationLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateCognitiveTaskLambdaVersion2YkHbPiVd1fvEuwUODiftkfleJbFL22qvlkFMjGxM8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCognitiveTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetCognitiveTaskByIdLambdaVersionVxVwQ7O2rUJaOJfLnc4ca8x9LhhmXVcECZ3TvodDLU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCognitiveTaskByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateCognitiveTaskLambdaVersion8ohpb7dJz9oEG49oMdtQf5kywape3V2AawLfsT1c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCognitiveTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteCognitiveTaskLambdaVersionO9oAw89ZtnqDkIZaeCbWNW6JZfh0vOE4MSHpMPKtmI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCognitiveTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateEyeTrackingTaskLambdaVersionMXELHjqCUu9a1SthZoYdRrWViM4rEjn3e46zSdSWU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateEyeTrackingTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetEyeTrackingTaskByIdLambdaVersionAjtCViaWpRtsk6dUsD0kG4jXrt2DnPWoZBWSPF44": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEyeTrackingTaskByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateEyeTrackingTaskLambdaVersionud05s3NhxBxgIyX1FdXIVHzT29CT8dGsTvbAYVissQw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEyeTrackingTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteEyeTrackingTaskLambdaVersionZT1OCs7fGthtUvpPMVgDwI9Z6W4L1LDpoe9IXwpXWdw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteEyeTrackingTaskLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateThankYouScreenLambdaVersionn3YgVRlKHKdCRMJWHuGNipPKZcIIFwbDMq76RqtxY8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateThankYouScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetThankYouScreenByIdLambdaVersion5xR6rkZ1qrP5b3Y2yQB9sB3PLoVyhryt7rUXs1e4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetThankYouScreenByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateThankYouScreenLambdaVersionyDdenCz6Nb1gmOLRz4FyMSY9frhkjLRnVTE6D7T2tco": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateThankYouScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "DeleteThankYouScreenLambdaVersion4pDNGVJyFNcXissaYFIRWVLWrPY2u1b4vj8Lxw8M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteThankYouScreenLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "CreateRecruitmentLinkLambdaVersionzKN63kB8HD9yiz8Prtuon0rqNGSdnBupdYG2CpZxUE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateRecruitmentLinkLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetAllRecruitmentLinksLambdaVersionAoHofyan4wGHV3wyZbR9GaEKZmarXW7jahmc086PpE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllRecruitmentLinksLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "GetRecruitmentLinkByIdLambdaVersionWJbnMF2iUN2Mm3C4CC8P8F6fCjun3KiXoz2pE4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetRecruitmentLinkByIdLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "UpdateRecruitmentLinkLambdaVersionHxEaco1OQVHQhijMKTZNhpOdETRKPrjpPLhPxM4U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateRecruitmentLinkLambdaFunction"
        },
        "CodeSha256": "w+9uqPNT2Q6fcUKwCwIUYr6WKoouyxcsHCTsTw44Pss="
      }
    },
    "RefreshEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(15 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshLambdaFunction",
                "Arn"
              ]
            },
            "Id": "refreshSchedule"
          }
        ]
      }
    },
    "RefreshLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RefreshEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-emotio-x-backend-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "ConnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DisconnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DefaultHandlerWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DefaultHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "SendMessageWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "SendMessageLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "RefreshWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "ConnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "ConnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DisconnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DefaultHandlerLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DefaultHandlerLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefaultHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SendMessageLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "SendMessageLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendMessageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "RefreshLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "RefreshLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdefaultWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$default",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DefaultHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "sendMessageWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "sendMessage",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "SendMessageWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "refreshWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "refresh",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "RefreshWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DefaultRouteSettings": {
          "DataTraceEnabled": true,
          "LoggingLevel": "INFO"
        },
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WebsocketsLogGroup}"
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.eventType $context.routeKey $context.connectionId\" $context.requestId"
        },
        "DeploymentId": {
          "Ref": "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs"
        }
      }
    },
    "WebsocketsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/websocket/emotio-x-backend-dev"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "emotio-x-backend",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/emotio-x-backend/dev/1738773475977-2025-02-05T16:37:55.977Z/custom-resources.zip"
        },
        "FunctionName": "emotio-x-backend-dev-custom-resource-apigw-cw-role",
        "Handler": "api-gateway-cloud-watch-role/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs18.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute",
        "SdefaultWebsocketsRoute",
        "sendMessageWebsocketsRoute",
        "refreshWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-emotio-x-backend",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowCredentials": true,
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "DELETE",
            "PUT",
            "OPTIONS"
          ],
          "AllowOrigins": [
            "http://localhost:3000"
          ]
        }
      }
    },
    "HttpApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/http-api/emotio-x-backend-dev"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        },
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "HttpApiLogGroup",
              "Arn"
            ]
          },
          "Format": "$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId"
        }
      },
      "DependsOn": "HttpApiLogGroup"
    },
    "RegisterUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegisterUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRegister": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /register",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegisterUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegisterUser"
    },
    "GetAllUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGetDashallDashusers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /get-all-users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllUsers"
    },
    "GetUserByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUserById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGetDashuserIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /get-user/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUserById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUserById"
    },
    "DeleteUserByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteUserById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteDeleteDashuserIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /delete-user/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteUserById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteUserById"
    },
    "UpdateUserByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateUserById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUpdateDashuserIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /update-user/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateUserById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateUserById"
    },
    "LoginUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLoginUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLoginUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLoginUser"
    },
    "LogoutUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LogoutUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogoutUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LogoutUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostLogout": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /logout",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogoutUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogoutUser"
    },
    "RefreshTokenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshTokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRefreshToken": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RefreshTokenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRefreshDashtoken": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /refresh-token",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRefreshToken"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRefreshToken"
    },
    "CreateResearchLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateResearchLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateResearch": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateResearchLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostResearchCreateDashresearch": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /research/create-research",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateResearch"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateResearch"
    },
    "GeneratePresignedUrlsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GeneratePresignedUrlsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGeneratePresignedUrls": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GeneratePresignedUrlsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostResearchGenerateDashpresignedDashurls": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /research/generate-presigned-urls",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGeneratePresignedUrls"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGeneratePresignedUrls"
    },
    "SendTemporaryPasswordLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendTemporaryPasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSendTemporaryPassword": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SendTemporaryPasswordLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostSendDashtemporaryDashpassword": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /send-temporary-password",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSendTemporaryPassword"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSendTemporaryPassword"
    },
    "UploadFilesToS3LambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadFilesToS3LambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUploadFilesToS3": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UploadFilesToS3LambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUploadDashimage": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /upload-image",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUploadFilesToS3"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUploadFilesToS3"
    },
    "CreateScreenerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateScreenerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateScreener": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateScreenerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostScreener": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /screener",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateScreener"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateScreener"
    },
    "GetScreenerByResearchLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetScreenerByResearchLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetScreenerByResearch": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetScreenerByResearchLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetScreenerResearchidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /screener/{researchId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetScreenerByResearch"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetScreenerByResearch"
    },
    "UpdateScreenerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateScreenerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateScreener": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateScreenerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutScreenerResearchidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /screener/{researchId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateScreener"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateScreener"
    },
    "DeleteScreenerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteScreenerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteScreener": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteScreenerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteScreenerScreeneridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /screener/{screenerId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteScreener"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteScreener"
    },
    "CreateWelcomeScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateWelcomeScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostWelcomeDashscreen": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /welcome-screen",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateWelcomeScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateWelcomeScreen"
    },
    "GetWelcomeScreenByResearchLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetWelcomeScreenByResearchLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetWelcomeScreenByResearch": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetWelcomeScreenByResearchLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetWelcomeDashscreenResearchidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /welcome-screen/{researchId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetWelcomeScreenByResearch"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetWelcomeScreenByResearch"
    },
    "UpdateWelcomeScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateWelcomeScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutWelcomeDashscreenResearchidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /welcome-screen/{researchId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateWelcomeScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateWelcomeScreen"
    },
    "DeleteWelcomeScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteWelcomeScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteWelcomeScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteWelcomeDashscreenWelcomescreenidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /welcome-screen/{welcomeScreenId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteWelcomeScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteWelcomeScreen"
    },
    "CreateImplicitAssociationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateImplicitAssociation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostImplicitDashassociation": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /implicit-association",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateImplicitAssociation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateImplicitAssociation"
    },
    "GetImplicitAssociationByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetImplicitAssociationByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetImplicitAssociationById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetImplicitAssociationByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetImplicitDashassociationIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /implicit-association/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetImplicitAssociationById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetImplicitAssociationById"
    },
    "UpdateImplicitAssociationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateImplicitAssociation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutImplicitDashassociationIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /implicit-association/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateImplicitAssociation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateImplicitAssociation"
    },
    "DeleteImplicitAssociationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteImplicitAssociation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteImplicitAssociationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteImplicitDashassociationIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /implicit-association/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteImplicitAssociation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteImplicitAssociation"
    },
    "CreateCognitiveTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateCognitiveTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCognitiveDashtask": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /cognitive-task",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateCognitiveTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateCognitiveTask"
    },
    "GetCognitiveTaskByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCognitiveTaskByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCognitiveTaskById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCognitiveTaskByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCognitiveDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /cognitive-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCognitiveTaskById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCognitiveTaskById"
    },
    "UpdateCognitiveTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCognitiveTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCognitiveDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /cognitive-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCognitiveTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCognitiveTask"
    },
    "DeleteCognitiveTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteCognitiveTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteCognitiveTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCognitiveDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /cognitive-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteCognitiveTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteCognitiveTask"
    },
    "CreateEyeTrackingTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateEyeTrackingTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostEyeDashtrackingDashtask": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /eye-tracking-task",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateEyeTrackingTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateEyeTrackingTask"
    },
    "GetEyeTrackingTaskByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEyeTrackingTaskByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetEyeTrackingTaskById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetEyeTrackingTaskByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetEyeDashtrackingDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /eye-tracking-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetEyeTrackingTaskById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetEyeTrackingTaskById"
    },
    "UpdateEyeTrackingTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEyeTrackingTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutEyeDashtrackingDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /eye-tracking-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEyeTrackingTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEyeTrackingTask"
    },
    "DeleteEyeTrackingTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteEyeTrackingTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteEyeTrackingTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteEyeDashtrackingDashtaskIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /eye-tracking-task/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteEyeTrackingTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteEyeTrackingTask"
    },
    "CreateThankYouScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateThankYouScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostThankDashyouDashscreen": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /thank-you-screen",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateThankYouScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateThankYouScreen"
    },
    "GetThankYouScreenByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetThankYouScreenByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetThankYouScreenById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetThankYouScreenByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetThankDashyouDashscreenIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /thank-you-screen/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetThankYouScreenById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetThankYouScreenById"
    },
    "UpdateThankYouScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateThankYouScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutThankDashyouDashscreenIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /thank-you-screen/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateThankYouScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateThankYouScreen"
    },
    "DeleteThankYouScreenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteThankYouScreen": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteThankYouScreenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteThankDashyouDashscreenIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /thank-you-screen/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteThankYouScreen"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteThankYouScreen"
    },
    "CreateRecruitmentLinkLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateRecruitmentLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateRecruitmentLink": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateRecruitmentLinkLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRecruitmentDashlink": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /recruitment-link",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateRecruitmentLink"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateRecruitmentLink"
    },
    "GetAllRecruitmentLinksLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllRecruitmentLinksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllRecruitmentLinks": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllRecruitmentLinksLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRecruitmentDashlink": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /recruitment-link",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllRecruitmentLinks"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllRecruitmentLinks"
    },
    "GetRecruitmentLinkByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetRecruitmentLinkByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetRecruitmentLinkById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetRecruitmentLinkByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRecruitmentDashlinkIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /recruitment-link/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetRecruitmentLinkById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetRecruitmentLinkById"
    },
    "UpdateRecruitmentLinkLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateRecruitmentLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateRecruitmentLink": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateRecruitmentLinkLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutRecruitmentDashlinkIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /recruitment-link/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateRecruitmentLink"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateRecruitmentLink"
    },
    "WebSocketLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/websocket/emotio-x-backend-dev-unique",
        "RetentionInDays": 14
      }
    },
    "DeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "emotio-x-backend-dev-deployment-bucket",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "ApiGatewayLoggingRoleAuthBackend": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "api-gateway-emotioX-backend",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "ResearchImagesBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "emotiox-backend-dev-bucket",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "WebSocketConnectionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "emotio-x-backend-dev-WebSocketConnections",
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "WebSocketApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "emotio-x-backend-dev-WebSocketApi",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "RegisterUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterUserLambdaVersionebSJNchUh30j6uIfepufjRUnYaynK8pXPsXXf7QyOQ"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-RegisterUserLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersionNR2zYFPlfrWEuXIEo2YMapJXsQ9jPc3iRmXFBwvreo"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserByIdLambdaVersionc3FAgRBuouWhbRrnYyFiUcufVynprVuOihsMrV524dc"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserByIdLambdaVersionjgz3MlHyk87gIRVN21uWFP2DB8vhbRe1JlvNCjVEXGo"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserByIdLambdaVersion3zX8d5QTLFneaeQ04hwP112OqIQtU7E9aCeI8J1Mw"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "LoginUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginUserLambdaVersionMwDICWraYdk5Bx78xOI0AuhinK6aPr4K3sw1wTqCg"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-LoginUserLambdaFunctionQualifiedArn"
      }
    },
    "LogoutUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LogoutUserLambdaVersionNhWyFeUMEy89pwAYovJzNdQDfUvQfn9QGQSnQXyR9w"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-LogoutUserLambdaFunctionQualifiedArn"
      }
    },
    "RefreshTokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RefreshTokenLambdaVersion90pjxA867CXQr2Q8xVnwA3Df2DTp9VbE4buDXTSIHw"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-RefreshTokenLambdaFunctionQualifiedArn"
      }
    },
    "CreateResearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateResearchLambdaVersionBc68a8mOU1tzxKRLOtY0MJ8p4tgdZOAoj2PK6jXFTY"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateResearchLambdaFunctionQualifiedArn"
      }
    },
    "GeneratePresignedUrlsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GeneratePresignedUrlsLambdaVersion7LYbEeX7n3eOsE2B6OkoUDlxBYQjdSBemzzXxFcfRk"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GeneratePresignedUrlsLambdaFunctionQualifiedArn"
      }
    },
    "ConnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConnectLambdaVersionTUeD0PTE4fIb2qNmmKGVDwcaS1zZRkXtbV7ftyrBY"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-ConnectLambdaFunctionQualifiedArn"
      }
    },
    "DisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectLambdaVersionRV81E55ER86qtgqhsq8xvxFBGTyt5ODn8ZOP0hEXkVo"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DisconnectLambdaFunctionQualifiedArn"
      }
    },
    "DefaultHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefaultHandlerLambdaVersionNDUsKzdktelSWh1vA0ci5SGbR6f9UKOvJME2rkV08"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DefaultHandlerLambdaFunctionQualifiedArn"
      }
    },
    "SendMessageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendMessageLambdaVersioneYe1q28KUSxB9fRE7DUbc4OathP4tGgpeXcgnLxzpI"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-SendMessageLambdaFunctionQualifiedArn"
      }
    },
    "RefreshLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RefreshLambdaVersion7iw9cj46720DGRVQUvf8us1ouPYndGnN7wgXfmDkE"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-RefreshLambdaFunctionQualifiedArn"
      }
    },
    "SendTemporaryPasswordLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendTemporaryPasswordLambdaVersionZLKLzhLNlFlvtjSg66rH0RNPjVLXWI7PXGthHOgk"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-SendTemporaryPasswordLambdaFunctionQualifiedArn"
      }
    },
    "UploadFilesToS3LambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadFilesToS3LambdaVersionVkKVdZ2a9yNMrsn9FxMnaMiFBm1VIO6e39hRlffXhI"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UploadFilesToS3LambdaFunctionQualifiedArn"
      }
    },
    "CreateScreenerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateScreenerLambdaVersionjrafmBU4NdQVbd9x2cYHrVAlrwtYzPbx4MEtZ7cGw8o"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateScreenerLambdaFunctionQualifiedArn"
      }
    },
    "GetScreenerByResearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetScreenerByResearchLambdaVersionKxwCVepewW744iBd2t2MFD320MIonBkGBPeZdBqFgnY"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetScreenerByResearchLambdaFunctionQualifiedArn"
      }
    },
    "UpdateScreenerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateScreenerLambdaVersionguKCCeXTIJCZHLTNJGLbuVZww5bAJatHA2NdVsMjg"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateScreenerLambdaFunctionQualifiedArn"
      }
    },
    "DeleteScreenerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteScreenerLambdaVersionbLoXNorxi98dbUEoBPPMqWjimBpU4uD7ZGx0sTFw2w"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteScreenerLambdaFunctionQualifiedArn"
      }
    },
    "CreateWelcomeScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateWelcomeScreenLambdaVersionxIvdGGjPRjXJzdy2sEBlJzuejnQFDmm8EmCkiZgA9o"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateWelcomeScreenLambdaFunctionQualifiedArn"
      }
    },
    "GetWelcomeScreenByResearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetWelcomeScreenByResearchLambdaVersion1TMgLaVNxWmNL7mOpLvtNtwLtjfr6OQfWmMO9nI7Y0"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetWelcomeScreenByResearchLambdaFunctionQualifiedArn"
      }
    },
    "UpdateWelcomeScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateWelcomeScreenLambdaVersionNVaUoye63KMQAwsFZRAJx4BUihADlfpgBXwckefo"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateWelcomeScreenLambdaFunctionQualifiedArn"
      }
    },
    "DeleteWelcomeScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteWelcomeScreenLambdaVersionkdk8Uv6UIdBfN1TOIQINx9B1ITT7Ypdo3Bd4FdabLo"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteWelcomeScreenLambdaFunctionQualifiedArn"
      }
    },
    "CreateImplicitAssociationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateImplicitAssociationLambdaVersionW3i2G8LcegG8ZzMKDcaN6lPGnCPtzGNZTrEYk1QSRFQ"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateImplicitAssociationLambdaFunctionQualifiedArn"
      }
    },
    "GetImplicitAssociationByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetImplicitAssociationByIdLambdaVersionYb94hMbnCwRFZdVaUuBpw734lsEhruRCTtfrtGeec"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetImplicitAssociationByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateImplicitAssociationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateImplicitAssociationLambdaVersion1zVdga3W4ux6lDJg4dLYK9ICYqkJDq3h82FziGgLLy4"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateImplicitAssociationLambdaFunctionQualifiedArn"
      }
    },
    "DeleteImplicitAssociationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteImplicitAssociationLambdaVersionbyayCcYp4rlQPnLO8bG32zkYKvefpE2qLsytiObfTg"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteImplicitAssociationLambdaFunctionQualifiedArn"
      }
    },
    "CreateCognitiveTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCognitiveTaskLambdaVersion2YkHbPiVd1fvEuwUODiftkfleJbFL22qvlkFMjGxM8"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateCognitiveTaskLambdaFunctionQualifiedArn"
      }
    },
    "GetCognitiveTaskByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCognitiveTaskByIdLambdaVersionVxVwQ7O2rUJaOJfLnc4ca8x9LhhmXVcECZ3TvodDLU"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetCognitiveTaskByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCognitiveTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCognitiveTaskLambdaVersion8ohpb7dJz9oEG49oMdtQf5kywape3V2AawLfsT1c"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateCognitiveTaskLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCognitiveTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCognitiveTaskLambdaVersionO9oAw89ZtnqDkIZaeCbWNW6JZfh0vOE4MSHpMPKtmI"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteCognitiveTaskLambdaFunctionQualifiedArn"
      }
    },
    "CreateEyeTrackingTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateEyeTrackingTaskLambdaVersionMXELHjqCUu9a1SthZoYdRrWViM4rEjn3e46zSdSWU"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateEyeTrackingTaskLambdaFunctionQualifiedArn"
      }
    },
    "GetEyeTrackingTaskByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEyeTrackingTaskByIdLambdaVersionAjtCViaWpRtsk6dUsD0kG4jXrt2DnPWoZBWSPF44"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetEyeTrackingTaskByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEyeTrackingTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEyeTrackingTaskLambdaVersionud05s3NhxBxgIyX1FdXIVHzT29CT8dGsTvbAYVissQw"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateEyeTrackingTaskLambdaFunctionQualifiedArn"
      }
    },
    "DeleteEyeTrackingTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteEyeTrackingTaskLambdaVersionZT1OCs7fGthtUvpPMVgDwI9Z6W4L1LDpoe9IXwpXWdw"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteEyeTrackingTaskLambdaFunctionQualifiedArn"
      }
    },
    "CreateThankYouScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateThankYouScreenLambdaVersionn3YgVRlKHKdCRMJWHuGNipPKZcIIFwbDMq76RqtxY8"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateThankYouScreenLambdaFunctionQualifiedArn"
      }
    },
    "GetThankYouScreenByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetThankYouScreenByIdLambdaVersion5xR6rkZ1qrP5b3Y2yQB9sB3PLoVyhryt7rUXs1e4"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetThankYouScreenByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateThankYouScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateThankYouScreenLambdaVersionyDdenCz6Nb1gmOLRz4FyMSY9frhkjLRnVTE6D7T2tco"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateThankYouScreenLambdaFunctionQualifiedArn"
      }
    },
    "DeleteThankYouScreenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteThankYouScreenLambdaVersion4pDNGVJyFNcXissaYFIRWVLWrPY2u1b4vj8Lxw8M"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-DeleteThankYouScreenLambdaFunctionQualifiedArn"
      }
    },
    "CreateRecruitmentLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateRecruitmentLinkLambdaVersionzKN63kB8HD9yiz8Prtuon0rqNGSdnBupdYG2CpZxUE"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-CreateRecruitmentLinkLambdaFunctionQualifiedArn"
      }
    },
    "GetAllRecruitmentLinksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllRecruitmentLinksLambdaVersionAoHofyan4wGHV3wyZbR9GaEKZmarXW7jahmc086PpE"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetAllRecruitmentLinksLambdaFunctionQualifiedArn"
      }
    },
    "GetRecruitmentLinkByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetRecruitmentLinkByIdLambdaVersionWJbnMF2iUN2Mm3C4CC8P8F6fCjun3KiXoz2pE4"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-GetRecruitmentLinkByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateRecruitmentLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateRecruitmentLinkLambdaVersionHxEaco1OQVHQhijMKTZNhpOdETRKPrjpPLhPxM4U"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-UpdateRecruitmentLinkLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-ServiceEndpointWebsocket"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-emotio-x-backend-dev-HttpApiUrl"
      }
    },
    "ApiUrl": {
      "Description": "URL base de la API desplegada",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      }
    },
    "WelcomeScreenApiUrl": {
      "Description": "URL para las rutas de WelcomeScreen",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/welcome-screen"
      }
    },
    "ScreenerApiUrl": {
      "Description": "URL para las rutas de Screener",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/screener"
      }
    },
    "ImplicitAssociationApiUrl": {
      "Description": "URL para las rutas de Implicit Association",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/implicit-association"
      }
    },
    "CognitiveTaskApiUrl": {
      "Description": "URL para las rutas de Cognitive Task",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/cognitive-task"
      }
    },
    "EyeTrackingApiUrl": {
      "Description": "URL para las rutas de Eye Tracking Task",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/eye-tracking-task"
      }
    },
    "ThankYouScreenApiUrl": {
      "Description": "URL para las rutas de Thank You Screen",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/thank-you-screen"
      }
    },
    "RecruitmentLinkApiUrl": {
      "Description": "URL base para las rutas de Recruitment Link",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/recruitment-link"
      }
    },
    "WebSocketApiEndpoint": {
      "Description": "WebSocket API Endpoint",
      "Value": {
        "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
      }
    },
    "S3BucketName": {
      "Description": "Nombre del bucket de S3 para este entorno",
      "Value": {
        "Ref": "DeploymentBucket"
      }
    }
  }
}