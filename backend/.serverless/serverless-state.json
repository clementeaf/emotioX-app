{
  "service": {
    "service": "emotio-x-backend",
    "serviceObject": {
      "name": "emotio-x-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "profile": "default",
      "websocketsApiName": "dev-emotio-x-backend-websockets",
      "websocketsApiRouteSelectionExpression": "$request.body.action",
      "logs": {
        "httpApi": {
          "format": "$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId"
        },
        "websocket": true
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:3000"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "DELETE",
            "PUT",
            "OPTIONS"
          ],
          "allowCredentials": true
        }
      },
      "environment": {
        "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
        "WEBSOCKET_ENDPOINT": {
          "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        },
        "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/@connections/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/emotio-x-backend-dev-WebSocketConnections"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket",
                "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket/*"
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-registerUser"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getAllUsers"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getUserById"
            }
          },
          "DeleteUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteUserById"
            }
          },
          "UpdateUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateUserById"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-loginUser"
            }
          },
          "LogoutUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-logoutUser"
            }
          },
          "RefreshTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refreshToken"
            }
          },
          "CreateResearchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createResearch"
            }
          },
          "GeneratePresignedUrlsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-generatePresignedUrls"
            }
          },
          "ConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-connect"
            }
          },
          "DisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-disconnect"
            }
          },
          "DefaultHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-defaultHandler"
            }
          },
          "SendMessageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendMessage"
            }
          },
          "RefreshLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refresh"
            }
          },
          "SendTemporaryPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendTemporaryPassword"
            }
          },
          "UploadFilesToS3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-uploadFilesToS3"
            }
          },
          "CreateScreenerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createScreener"
            }
          },
          "GetScreenerByResearchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getScreenerByResearch"
            }
          },
          "UpdateScreenerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateScreener"
            }
          },
          "DeleteScreenerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteScreener"
            }
          },
          "CreateWelcomeScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createWelcomeScreen"
            }
          },
          "GetWelcomeScreenByResearchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getWelcomeScreenByResearch"
            }
          },
          "UpdateWelcomeScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateWelcomeScreen"
            }
          },
          "DeleteWelcomeScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteWelcomeScreen"
            }
          },
          "CreateImplicitAssociationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createImplicitAssociation"
            }
          },
          "GetImplicitAssociationByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getImplicitAssociationById"
            }
          },
          "UpdateImplicitAssociationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateImplicitAssociation"
            }
          },
          "DeleteImplicitAssociationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteImplicitAssociation"
            }
          },
          "CreateCognitiveTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createCognitiveTask"
            }
          },
          "GetCognitiveTaskByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getCognitiveTaskById"
            }
          },
          "UpdateCognitiveTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateCognitiveTask"
            }
          },
          "DeleteCognitiveTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteCognitiveTask"
            }
          },
          "CreateEyeTrackingTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createEyeTrackingTask"
            }
          },
          "GetEyeTrackingTaskByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getEyeTrackingTaskById"
            }
          },
          "UpdateEyeTrackingTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateEyeTrackingTask"
            }
          },
          "DeleteEyeTrackingTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteEyeTrackingTask"
            }
          },
          "CreateThankYouScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createThankYouScreen"
            }
          },
          "GetThankYouScreenByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getThankYouScreenById"
            }
          },
          "UpdateThankYouScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateThankYouScreen"
            }
          },
          "DeleteThankYouScreenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteThankYouScreen"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "emotio-x-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "emotio-x-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.registerUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-registerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.getAllUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.getUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "DeleteUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.deleteUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserByIdLogGroup"
            ]
          },
          "UpdateUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.updateUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserByIdLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.loginUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-loginUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "LogoutUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.logoutUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-logoutUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutUserLogGroup"
            ]
          },
          "RefreshTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.refreshToken",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-refreshToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshTokenLogGroup"
            ]
          },
          "CreateResearchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/createResearchController.createResearchWithImages",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createResearch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateResearchLogGroup"
            ]
          },
          "GeneratePresignedUrlsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-generatePresignedUrls",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GeneratePresignedUrlsLogGroup"
            ]
          },
          "ConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/connectHandler.connectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-connect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectLogGroup"
            ]
          },
          "DisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/disconnectHandler.disconnectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-disconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectLogGroup"
            ]
          },
          "DefaultHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/defaultHandler.defaultHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-defaultHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DefaultHandlerLogGroup"
            ]
          },
          "SendMessageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/sendMessageHandler.sendMessageHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-sendMessage",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendMessageLogGroup"
            ]
          },
          "RefreshLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "src/websocket/refreshHandler.refreshHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-refresh",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshLogGroup"
            ]
          },
          "SendTemporaryPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.sendTemporaryPassword",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-sendTemporaryPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendTemporaryPasswordLogGroup"
            ]
          },
          "UploadFilesToS3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-uploadFilesToS3",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFilesToS3LogGroup"
            ]
          },
          "CreateScreenerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/screenerController.createScreener",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createScreener",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateScreenerLogGroup"
            ]
          },
          "GetScreenerByResearchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/screenerController.getScreenerByResearch",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getScreenerByResearch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetScreenerByResearchLogGroup"
            ]
          },
          "UpdateScreenerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/screenerController.updateScreener",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateScreener",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateScreenerLogGroup"
            ]
          },
          "DeleteScreenerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/screenerController.deleteScreener",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteScreener",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteScreenerLogGroup"
            ]
          },
          "CreateWelcomeScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/welcomeScreenController.createWelcomeScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createWelcomeScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateWelcomeScreenLogGroup"
            ]
          },
          "GetWelcomeScreenByResearchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/welcomeScreenController.getWelcomeScreenByResearch",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getWelcomeScreenByResearch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetWelcomeScreenByResearchLogGroup"
            ]
          },
          "UpdateWelcomeScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/welcomeScreenController.updateWelcomeScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateWelcomeScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateWelcomeScreenLogGroup"
            ]
          },
          "DeleteWelcomeScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/welcomeScreenController.deleteWelcomeScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteWelcomeScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteWelcomeScreenLogGroup"
            ]
          },
          "CreateImplicitAssociationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/implicitAssociationController.createImplicitAssociation",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createImplicitAssociation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateImplicitAssociationLogGroup"
            ]
          },
          "GetImplicitAssociationByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/implicitAssociationController.getImplicitAssociationById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getImplicitAssociationById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetImplicitAssociationByIdLogGroup"
            ]
          },
          "UpdateImplicitAssociationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/implicitAssociationController.updateImplicitAssociation",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateImplicitAssociation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateImplicitAssociationLogGroup"
            ]
          },
          "DeleteImplicitAssociationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/implicitAssociationController.deleteImplicitAssociation",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteImplicitAssociation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteImplicitAssociationLogGroup"
            ]
          },
          "CreateCognitiveTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/cognitiveTaskController.createCognitiveTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createCognitiveTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCognitiveTaskLogGroup"
            ]
          },
          "GetCognitiveTaskByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/cognitiveTaskController.getCognitiveTaskById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getCognitiveTaskById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCognitiveTaskByIdLogGroup"
            ]
          },
          "UpdateCognitiveTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/cognitiveTaskController.updateCognitiveTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateCognitiveTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCognitiveTaskLogGroup"
            ]
          },
          "DeleteCognitiveTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/cognitiveTaskController.deleteCognitiveTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteCognitiveTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCognitiveTaskLogGroup"
            ]
          },
          "CreateEyeTrackingTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/eyeTrackingController.createEyeTrackingTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createEyeTrackingTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEyeTrackingTaskLogGroup"
            ]
          },
          "GetEyeTrackingTaskByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/eyeTrackingController.getEyeTrackingTaskById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getEyeTrackingTaskById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEyeTrackingTaskByIdLogGroup"
            ]
          },
          "UpdateEyeTrackingTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/eyeTrackingController.updateEyeTrackingTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateEyeTrackingTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEyeTrackingTaskLogGroup"
            ]
          },
          "DeleteEyeTrackingTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/eyeTrackingController.deleteEyeTrackingTask",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteEyeTrackingTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEyeTrackingTaskLogGroup"
            ]
          },
          "CreateThankYouScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/thankYouScreenController.createThankYouScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createThankYouScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateThankYouScreenLogGroup"
            ]
          },
          "GetThankYouScreenByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/thankYouScreenController.getThankYouScreenById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getThankYouScreenById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetThankYouScreenByIdLogGroup"
            ]
          },
          "UpdateThankYouScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/thankYouScreenController.updateThankYouScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateThankYouScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateThankYouScreenLogGroup"
            ]
          },
          "DeleteThankYouScreenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/thankYouScreenController.deleteThankYouScreen",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteThankYouScreen",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteThankYouScreenLogGroup"
            ]
          },
          "RegisterUserLambdaVersionP52D5wtqMbrdO0B9A8k1Scb2u5lSBHVAXTO7iZdnE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetAllUsersLambdaVersionlplpZOWTLNAaPn21JTKTGCAbq9z2JbZrxiZbpnqxYc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetUserByIdLambdaVersionKlDa8pWP0wNssGoEemKKyMESAYKTyeeJoW5lybcJGI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteUserByIdLambdaVersiont98cFfdVFyWkoyX3ETHGIarcNOxcTMACRyXls9KlcY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateUserByIdLambdaVersion8NqmNMFQWXoV1u3eAQgwZXVTzdw0OOiHlMJZU0CIZY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "LoginUserLambdaVersionOWE1IdKqtNQeqgUYSbuAoTtxtl4nM8fVhp5WoMpb2w4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "LogoutUserLambdaVersion1FClx1eN3GsGYqmPJJU63j6LjEWg6hwTyMCjU6zfE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutUserLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "RefreshTokenLambdaVersionsyqBQurRzaGB7QPQwMoTzSbT6lP8Ntr501JG0kOcCQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateResearchLambdaVersionveHv63yWa9jWdeE6SQbwTw2obYXbhQ3WynC51RBw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateResearchLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GeneratePresignedUrlsLambdaVersionUljgG4CZn7ldmJgxlKrM977o03CKTGSDVk0VyQUuk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GeneratePresignedUrlsLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "ConnectLambdaVersion7m4S2QqW55F2iUgxR44hWkvUBk13Nk5Te4qGWbd6ew": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DisconnectLambdaVersionG37KOrd8pGfgAYQKETNgeKO3ssGBoUNDdfLUSfBco": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DefaultHandlerLambdaVersion7xONPbOIr21REtTHqSDdkzWM8QZp1ffVW27zouqLI4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultHandlerLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "SendMessageLambdaVersionwYUdKKZa8lxmU5WCGWR4WPbW5qSk4QHD5SzT0DUko8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendMessageLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "RefreshLambdaVersion55JqbVQJBrr6oXeZRaDkdIcEJYjpkzVDRG26Ol00": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "SendTemporaryPasswordLambdaVersione6u64euTAjgiHankmechgATMNISTc9nDOFfgXN3bU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendTemporaryPasswordLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UploadFilesToS3LambdaVersionlzQo6KCeEfoJCM64PQLYPQdJIB2JtXotZjweifOG7ZE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFilesToS3LambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateScreenerLambdaVersionaY2e2XXazk85InBHgARQT6hiZwdXwkPoTrP5RMHq9I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateScreenerLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetScreenerByResearchLambdaVersionobzZKpCaHAbP02dgfe1OrGg0NT3Gh1xG5HjVqymhlM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetScreenerByResearchLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateScreenerLambdaVersion33TGwrpxkQehxMI0qal44iQALpaWWJ6styYyyIHnepI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateScreenerLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteScreenerLambdaVersionwyjOac6dbMFVfKodLeKBRNqdsNEkNMQWvUrgW1JbE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteScreenerLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateWelcomeScreenLambdaVersion22MKK5yMydwGAs1Pczdnf8CcA01uZLnFgz4svKtQb8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateWelcomeScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetWelcomeScreenByResearchLambdaVersionKl0Irw3G9zJxTeMc65oXz9R1xJrXPOdIYgWAhWIYRfE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetWelcomeScreenByResearchLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateWelcomeScreenLambdaVersion47zpf70fdDsGoH0q2WZ80N90pbQwvZbXqXEnIgas": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateWelcomeScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteWelcomeScreenLambdaVersionjd5n75QknMLsTEzwqU5KI6THN158DUkszhzJY4fWis": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteWelcomeScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateImplicitAssociationLambdaVersionbeRZYz3O8k8SlSEWAONjLgmV8zoaCPIkMR0EXQAum0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateImplicitAssociationLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetImplicitAssociationByIdLambdaVersionajWWLuGbCTKPQqsOxz48lUBgVRVHTEgc0V9lpThGgQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetImplicitAssociationByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateImplicitAssociationLambdaVersionnaBKWWUmMcS8tR7iDLMzb3JcSNxwoDYrsrhn1YI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateImplicitAssociationLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteImplicitAssociationLambdaVersion61rmTb79SawKxkwIVjwl5Sd0QIwQVhMN2qfgmbNo7o4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteImplicitAssociationLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateCognitiveTaskLambdaVersionf8peKEUR3TNiLXng1BPLrwI8ZLYgke8d4BmEkO0W7I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCognitiveTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetCognitiveTaskByIdLambdaVersionQLb3l8XrEMOtryAgjSElZVmilT6bnpRymSs1TFNVMxI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCognitiveTaskByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateCognitiveTaskLambdaVersionW98sgRp0Tg2atx506N4LtYueKESi8jSsziEYGOzCU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCognitiveTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteCognitiveTaskLambdaVersionpzQAvAdqf2OAcRpiuLInD7aFukPJsmLODvOicQJw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCognitiveTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateEyeTrackingTaskLambdaVersionyd1YISfr3QRB42A54aOn17tXeIkNDJa6aEZnFYfp68": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEyeTrackingTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetEyeTrackingTaskByIdLambdaVersionLtq7WRHlwKSKOkjx2xGMW4Ipl22a5kuU4Yy0cQeA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEyeTrackingTaskByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateEyeTrackingTaskLambdaVersionQBg7dlbjvqa64xGAMGOdslfTxROfxGgDLtBjNJWRSk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEyeTrackingTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteEyeTrackingTaskLambdaVersion1xEiGtQIso3pgAPosUvgaXBU9iWXveOk2aQTywzuLs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEyeTrackingTaskLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "CreateThankYouScreenLambdaVersion9b6Ie7ih6vAcsYUammRFbyrbeRyfrlPFswk4C81w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateThankYouScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "GetThankYouScreenByIdLambdaVersionhHMp2SinkKhzHDqVkPmtqOZv2HAqbc2SmJSHHW84Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetThankYouScreenByIdLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "UpdateThankYouScreenLambdaVersionRFnkE5YteOeHe4mH0wnsiEqiIHB6UlS1dXyjNRxM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateThankYouScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "DeleteThankYouScreenLambdaVersionvb3DFxZn32EzCbmTp1jTgBj6UmleEaJK5aaQqZDivY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteThankYouScreenLambdaFunction"
              },
              "CodeSha256": "qCf4Ag94QfADL71lPkwsKiQ4uKQtivTWQIVRza+vs/0="
            }
          },
          "RefreshEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(15 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RefreshLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "refreshSchedule"
                }
              ]
            }
          },
          "RefreshLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RefreshEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotio-x-backend-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DefaultHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "SendMessageWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SendMessageLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "RefreshWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RefreshLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DefaultHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DefaultHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SendMessageLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "SendMessageLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendMessageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "RefreshLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "RefreshLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DefaultHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "sendMessageWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "sendMessage",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "SendMessageWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "refreshWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "refresh",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "RefreshWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DefaultRouteSettings": {
                "DataTraceEnabled": true,
                "LoggingLevel": "INFO"
              },
              "AccessLogSettings": {
                "DestinationArn": {
                  "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WebsocketsLogGroup}"
                },
                "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.eventType $context.routeKey $context.connectionId\" $context.requestId"
              },
              "DeploymentId": {
                "Ref": "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs"
              }
            }
          },
          "WebsocketsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/websocket/emotio-x-backend-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "emotio-x-backend",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z/custom-resources.zip"
              },
              "FunctionName": "emotio-x-backend-dev-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs18.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute",
              "sendMessageWebsocketsRoute",
              "refreshWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotio-x-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": true,
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "DELETE",
                  "PUT",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:3000"
                ]
              }
            }
          },
          "HttpApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/http-api/emotio-x-backend-dev"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "AccessLogSettings": {
                "DestinationArn": {
                  "Fn::GetAtt": [
                    "HttpApiLogGroup",
                    "Arn"
                  ]
                },
                "Format": "$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId"
              }
            },
            "DependsOn": "HttpApiLogGroup"
          },
          "RegisterUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRegister": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /register",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterUser"
          },
          "GetAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashallDashusers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-all-users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllUsers"
          },
          "GetUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserById"
          },
          "DeleteUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteDeleteDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /delete-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUserById"
          },
          "UpdateUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUpdateDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /update-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUserById"
          },
          "LoginUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLoginUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLoginUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLoginUser"
          },
          "LogoutUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogoutUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LogoutUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogoutUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogoutUser"
          },
          "RefreshTokenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRefreshToken": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRefreshDashtoken": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /refresh-token",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRefreshToken"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRefreshToken"
          },
          "CreateResearchLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateResearchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateResearch": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateResearchLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostResearchCreateDashresearch": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /research/create-research",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateResearch"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateResearch"
          },
          "GeneratePresignedUrlsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GeneratePresignedUrlsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGeneratePresignedUrls": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GeneratePresignedUrlsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostResearchGenerateDashpresignedDashurls": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /research/generate-presigned-urls",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGeneratePresignedUrls"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGeneratePresignedUrls"
          },
          "SendTemporaryPasswordLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendTemporaryPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendTemporaryPassword": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendTemporaryPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostSendDashtemporaryDashpassword": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /send-temporary-password",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendTemporaryPassword"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendTemporaryPassword"
          },
          "UploadFilesToS3LambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadFilesToS3LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadFilesToS3": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadFilesToS3LambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUploadDashimage": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /upload-image",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadFilesToS3"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadFilesToS3"
          },
          "CreateScreenerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateScreenerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateScreener": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateScreenerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostScreener": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /screener",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateScreener"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateScreener"
          },
          "GetScreenerByResearchLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetScreenerByResearchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetScreenerByResearch": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetScreenerByResearchLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetScreenerResearchidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /screener/{researchId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetScreenerByResearch"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetScreenerByResearch"
          },
          "UpdateScreenerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateScreenerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateScreener": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateScreenerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutScreenerResearchidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /screener/{researchId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateScreener"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateScreener"
          },
          "DeleteScreenerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteScreenerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteScreener": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteScreenerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteScreenerScreeneridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /screener/{screenerId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteScreener"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteScreener"
          },
          "CreateWelcomeScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateWelcomeScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateWelcomeScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateWelcomeScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostWelcomeDashscreen": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /welcome-screen",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateWelcomeScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateWelcomeScreen"
          },
          "GetWelcomeScreenByResearchLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetWelcomeScreenByResearchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetWelcomeScreenByResearch": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetWelcomeScreenByResearchLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetWelcomeDashscreenResearchidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /welcome-screen/{researchId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetWelcomeScreenByResearch"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetWelcomeScreenByResearch"
          },
          "UpdateWelcomeScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateWelcomeScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateWelcomeScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateWelcomeScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutWelcomeDashscreenResearchidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /welcome-screen/{researchId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateWelcomeScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateWelcomeScreen"
          },
          "DeleteWelcomeScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteWelcomeScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteWelcomeScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteWelcomeScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteWelcomeDashscreenWelcomescreenidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /welcome-screen/{welcomeScreenId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteWelcomeScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteWelcomeScreen"
          },
          "CreateImplicitAssociationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateImplicitAssociationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateImplicitAssociation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateImplicitAssociationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostImplicitDashassociation": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /implicit-association",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateImplicitAssociation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateImplicitAssociation"
          },
          "GetImplicitAssociationByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetImplicitAssociationByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetImplicitAssociationById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetImplicitAssociationByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetImplicitDashassociationIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /implicit-association/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetImplicitAssociationById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetImplicitAssociationById"
          },
          "UpdateImplicitAssociationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateImplicitAssociationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateImplicitAssociation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateImplicitAssociationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutImplicitDashassociationIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /implicit-association/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateImplicitAssociation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateImplicitAssociation"
          },
          "DeleteImplicitAssociationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteImplicitAssociationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteImplicitAssociation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteImplicitAssociationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteImplicitDashassociationIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /implicit-association/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteImplicitAssociation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteImplicitAssociation"
          },
          "CreateCognitiveTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCognitiveTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCognitiveTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCognitiveTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCognitiveDashtask": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cognitive-task",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCognitiveTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCognitiveTask"
          },
          "GetCognitiveTaskByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCognitiveTaskByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCognitiveTaskById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCognitiveTaskByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCognitiveDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cognitive-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCognitiveTaskById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCognitiveTaskById"
          },
          "UpdateCognitiveTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCognitiveTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCognitiveTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCognitiveTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCognitiveDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cognitive-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCognitiveTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCognitiveTask"
          },
          "DeleteCognitiveTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCognitiveTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCognitiveTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCognitiveTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCognitiveDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cognitive-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCognitiveTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCognitiveTask"
          },
          "CreateEyeTrackingTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEyeTrackingTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateEyeTrackingTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEyeTrackingTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostEyeDashtrackingDashtask": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /eye-tracking-task",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateEyeTrackingTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateEyeTrackingTask"
          },
          "GetEyeTrackingTaskByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEyeTrackingTaskByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEyeTrackingTaskById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEyeTrackingTaskByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetEyeDashtrackingDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /eye-tracking-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEyeTrackingTaskById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEyeTrackingTaskById"
          },
          "UpdateEyeTrackingTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEyeTrackingTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEyeTrackingTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateEyeTrackingTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutEyeDashtrackingDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /eye-tracking-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEyeTrackingTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEyeTrackingTask"
          },
          "DeleteEyeTrackingTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEyeTrackingTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteEyeTrackingTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteEyeTrackingTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteEyeDashtrackingDashtaskIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /eye-tracking-task/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteEyeTrackingTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteEyeTrackingTask"
          },
          "CreateThankYouScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateThankYouScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateThankYouScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateThankYouScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostThankDashyouDashscreen": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /thank-you-screen",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateThankYouScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateThankYouScreen"
          },
          "GetThankYouScreenByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetThankYouScreenByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetThankYouScreenById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetThankYouScreenByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetThankDashyouDashscreenIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /thank-you-screen/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetThankYouScreenById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetThankYouScreenById"
          },
          "UpdateThankYouScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateThankYouScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateThankYouScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateThankYouScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutThankDashyouDashscreenIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /thank-you-screen/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateThankYouScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateThankYouScreen"
          },
          "DeleteThankYouScreenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteThankYouScreenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteThankYouScreen": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteThankYouScreenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteThankDashyouDashscreenIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /thank-you-screen/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteThankYouScreen"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteThankYouScreen"
          },
          "WebSocketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/websocket/emotio-x-backend-dev-unique",
              "RetentionInDays": 14
            }
          },
          "DeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "emotio-x-backend-dev-deployment-bucket",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              },
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "ApiGatewayLoggingRoleAuthBackend": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "api-gateway-emotioX-backend",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            }
          },
          "ResearchImagesBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "emotiox-backend-dev-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "emotio-x-backend-dev-WebSocketConnections",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WebSocketApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "emotio-x-backend-dev-WebSocketApi",
              "ProtocolType": "WEBSOCKET",
              "RouteSelectionExpression": "$request.body.action"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersionP52D5wtqMbrdO0B9A8k1Scb2u5lSBHVAXTO7iZdnE"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionlplpZOWTLNAaPn21JTKTGCAbq9z2JbZrxiZbpnqxYc"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersionKlDa8pWP0wNssGoEemKKyMESAYKTyeeJoW5lybcJGI"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserByIdLambdaVersiont98cFfdVFyWkoyX3ETHGIarcNOxcTMACRyXls9KlcY"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserByIdLambdaVersion8NqmNMFQWXoV1u3eAQgwZXVTzdw0OOiHlMJZU0CIZY"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersionOWE1IdKqtNQeqgUYSbuAoTtxtl4nM8fVhp5WoMpb2w4"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "LogoutUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutUserLambdaVersion1FClx1eN3GsGYqmPJJU63j6LjEWg6hwTyMCjU6zfE"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-LogoutUserLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokenLambdaVersionsyqBQurRzaGB7QPQwMoTzSbT6lP8Ntr501JG0kOcCQ"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RefreshTokenLambdaFunctionQualifiedArn"
            }
          },
          "CreateResearchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateResearchLambdaVersionveHv63yWa9jWdeE6SQbwTw2obYXbhQ3WynC51RBw"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateResearchLambdaFunctionQualifiedArn"
            }
          },
          "GeneratePresignedUrlsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GeneratePresignedUrlsLambdaVersionUljgG4CZn7ldmJgxlKrM977o03CKTGSDVk0VyQUuk"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GeneratePresignedUrlsLambdaFunctionQualifiedArn"
            }
          },
          "ConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectLambdaVersion7m4S2QqW55F2iUgxR44hWkvUBk13Nk5Te4qGWbd6ew"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ConnectLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectLambdaVersionG37KOrd8pGfgAYQKETNgeKO3ssGBoUNDdfLUSfBco"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DisconnectLambdaFunctionQualifiedArn"
            }
          },
          "DefaultHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultHandlerLambdaVersion7xONPbOIr21REtTHqSDdkzWM8QZp1ffVW27zouqLI4"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DefaultHandlerLambdaFunctionQualifiedArn"
            }
          },
          "SendMessageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendMessageLambdaVersionwYUdKKZa8lxmU5WCGWR4WPbW5qSk4QHD5SzT0DUko8"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-SendMessageLambdaFunctionQualifiedArn"
            }
          },
          "RefreshLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshLambdaVersion55JqbVQJBrr6oXeZRaDkdIcEJYjpkzVDRG26Ol00"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RefreshLambdaFunctionQualifiedArn"
            }
          },
          "SendTemporaryPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendTemporaryPasswordLambdaVersione6u64euTAjgiHankmechgATMNISTc9nDOFfgXN3bU"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-SendTemporaryPasswordLambdaFunctionQualifiedArn"
            }
          },
          "UploadFilesToS3LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFilesToS3LambdaVersionlzQo6KCeEfoJCM64PQLYPQdJIB2JtXotZjweifOG7ZE"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UploadFilesToS3LambdaFunctionQualifiedArn"
            }
          },
          "CreateScreenerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateScreenerLambdaVersionaY2e2XXazk85InBHgARQT6hiZwdXwkPoTrP5RMHq9I"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateScreenerLambdaFunctionQualifiedArn"
            }
          },
          "GetScreenerByResearchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetScreenerByResearchLambdaVersionobzZKpCaHAbP02dgfe1OrGg0NT3Gh1xG5HjVqymhlM"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetScreenerByResearchLambdaFunctionQualifiedArn"
            }
          },
          "UpdateScreenerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateScreenerLambdaVersion33TGwrpxkQehxMI0qal44iQALpaWWJ6styYyyIHnepI"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateScreenerLambdaFunctionQualifiedArn"
            }
          },
          "DeleteScreenerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteScreenerLambdaVersionwyjOac6dbMFVfKodLeKBRNqdsNEkNMQWvUrgW1JbE"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteScreenerLambdaFunctionQualifiedArn"
            }
          },
          "CreateWelcomeScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateWelcomeScreenLambdaVersion22MKK5yMydwGAs1Pczdnf8CcA01uZLnFgz4svKtQb8"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateWelcomeScreenLambdaFunctionQualifiedArn"
            }
          },
          "GetWelcomeScreenByResearchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetWelcomeScreenByResearchLambdaVersionKl0Irw3G9zJxTeMc65oXz9R1xJrXPOdIYgWAhWIYRfE"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetWelcomeScreenByResearchLambdaFunctionQualifiedArn"
            }
          },
          "UpdateWelcomeScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateWelcomeScreenLambdaVersion47zpf70fdDsGoH0q2WZ80N90pbQwvZbXqXEnIgas"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateWelcomeScreenLambdaFunctionQualifiedArn"
            }
          },
          "DeleteWelcomeScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteWelcomeScreenLambdaVersionjd5n75QknMLsTEzwqU5KI6THN158DUkszhzJY4fWis"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteWelcomeScreenLambdaFunctionQualifiedArn"
            }
          },
          "CreateImplicitAssociationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateImplicitAssociationLambdaVersionbeRZYz3O8k8SlSEWAONjLgmV8zoaCPIkMR0EXQAum0"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateImplicitAssociationLambdaFunctionQualifiedArn"
            }
          },
          "GetImplicitAssociationByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetImplicitAssociationByIdLambdaVersionajWWLuGbCTKPQqsOxz48lUBgVRVHTEgc0V9lpThGgQ"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetImplicitAssociationByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateImplicitAssociationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateImplicitAssociationLambdaVersionnaBKWWUmMcS8tR7iDLMzb3JcSNxwoDYrsrhn1YI"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateImplicitAssociationLambdaFunctionQualifiedArn"
            }
          },
          "DeleteImplicitAssociationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteImplicitAssociationLambdaVersion61rmTb79SawKxkwIVjwl5Sd0QIwQVhMN2qfgmbNo7o4"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteImplicitAssociationLambdaFunctionQualifiedArn"
            }
          },
          "CreateCognitiveTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCognitiveTaskLambdaVersionf8peKEUR3TNiLXng1BPLrwI8ZLYgke8d4BmEkO0W7I"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateCognitiveTaskLambdaFunctionQualifiedArn"
            }
          },
          "GetCognitiveTaskByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCognitiveTaskByIdLambdaVersionQLb3l8XrEMOtryAgjSElZVmilT6bnpRymSs1TFNVMxI"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetCognitiveTaskByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCognitiveTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCognitiveTaskLambdaVersionW98sgRp0Tg2atx506N4LtYueKESi8jSsziEYGOzCU"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateCognitiveTaskLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCognitiveTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCognitiveTaskLambdaVersionpzQAvAdqf2OAcRpiuLInD7aFukPJsmLODvOicQJw"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteCognitiveTaskLambdaFunctionQualifiedArn"
            }
          },
          "CreateEyeTrackingTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEyeTrackingTaskLambdaVersionyd1YISfr3QRB42A54aOn17tXeIkNDJa6aEZnFYfp68"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateEyeTrackingTaskLambdaFunctionQualifiedArn"
            }
          },
          "GetEyeTrackingTaskByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEyeTrackingTaskByIdLambdaVersionLtq7WRHlwKSKOkjx2xGMW4Ipl22a5kuU4Yy0cQeA"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetEyeTrackingTaskByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEyeTrackingTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEyeTrackingTaskLambdaVersionQBg7dlbjvqa64xGAMGOdslfTxROfxGgDLtBjNJWRSk"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateEyeTrackingTaskLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEyeTrackingTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEyeTrackingTaskLambdaVersion1xEiGtQIso3pgAPosUvgaXBU9iWXveOk2aQTywzuLs"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteEyeTrackingTaskLambdaFunctionQualifiedArn"
            }
          },
          "CreateThankYouScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateThankYouScreenLambdaVersion9b6Ie7ih6vAcsYUammRFbyrbeRyfrlPFswk4C81w"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateThankYouScreenLambdaFunctionQualifiedArn"
            }
          },
          "GetThankYouScreenByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetThankYouScreenByIdLambdaVersionhHMp2SinkKhzHDqVkPmtqOZv2HAqbc2SmJSHHW84Q"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetThankYouScreenByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateThankYouScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateThankYouScreenLambdaVersionRFnkE5YteOeHe4mH0wnsiEqiIHB6UlS1dXyjNRxM"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateThankYouScreenLambdaFunctionQualifiedArn"
            }
          },
          "DeleteThankYouScreenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteThankYouScreenLambdaVersionvb3DFxZn32EzCbmTp1jTgBj6UmleEaJK5aaQqZDivY"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteThankYouScreenLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-HttpApiUrl"
            }
          },
          "ApiUrl": {
            "Description": "URL base de la API desplegada",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            }
          },
          "WelcomeScreenApiUrl": {
            "Description": "URL para las rutas de WelcomeScreen",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/welcome-screen"
            }
          },
          "ScreenerApiUrl": {
            "Description": "URL para las rutas de Screener",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/screener"
            }
          },
          "ImplicitAssociationApiUrl": {
            "Description": "URL para las rutas de Implicit Association",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/implicit-association"
            }
          },
          "CognitiveTaskApiUrl": {
            "Description": "URL para las rutas de Cognitive Task",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/cognitive-task"
            }
          },
          "EyeTrackingApiUrl": {
            "Description": "URL para las rutas de Eye Tracking Task",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/eye-tracking-task"
            }
          },
          "ThankYouScreenApiUrl": {
            "Description": "URL para las rutas de Thank You Screen",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/thank-you-screen"
            }
          },
          "WebSocketApiEndpoint": {
            "Description": "WebSocket API Endpoint",
            "Value": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            }
          },
          "S3BucketName": {
            "Description": "Nombre del bucket de S3 para este entorno",
            "Value": {
              "Ref": "DeploymentBucket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "s3BucketName": "emotio-x-backend-dev-deployment-bucket",
      "webpack": {
        "includeModules": {
          "forceExclude": [
            "aws-sdk"
          ]
        }
      },
      "exportOutputs": {
        "fileName": "outputs.json"
      },
      "exportEndpoints": {
        "fileName": "endpoints.json",
        "include": [
          "httpApi"
        ]
      },
      "esbuild": {
        "bundle": true,
        "external": [
          "argon2"
        ]
      }
    },
    "plugins": [
      "serverless-esbuild",
      "serverless-offline",
      "serverless-export-outputs",
      "serverless-plugin-export-endpoints"
    ],
    "pluginsData": {},
    "functions": {
      "registerUser": {
        "handler": "dist/controllers/controller.registerUser",
        "events": [
          {
            "httpApi": {
              "path": "/register",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/register"
          }
        ],
        "name": "emotio-x-backend-dev-registerUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersionP52D5wtqMbrdO0B9A8k1Scb2u5lSBHVAXTO7iZdnE"
      },
      "getAllUsers": {
        "handler": "dist/controllers/controller.getAllUsers",
        "events": [
          {
            "httpApi": {
              "path": "/get-all-users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-all-users"
          }
        ],
        "name": "emotio-x-backend-dev-getAllUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionlplpZOWTLNAaPn21JTKTGCAbq9z2JbZrxiZbpnqxYc"
      },
      "getUserById": {
        "handler": "dist/controllers/controller.getUserById",
        "events": [
          {
            "httpApi": {
              "path": "/get-user/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIdLambdaVersionKlDa8pWP0wNssGoEemKKyMESAYKTyeeJoW5lybcJGI"
      },
      "deleteUserById": {
        "handler": "dist/controllers/controller.deleteUserById",
        "events": [
          {
            "httpApi": {
              "path": "/delete-user/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/delete-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserByIdLambdaVersiont98cFfdVFyWkoyX3ETHGIarcNOxcTMACRyXls9KlcY"
      },
      "updateUserById": {
        "handler": "dist/controllers/controller.updateUserById",
        "events": [
          {
            "httpApi": {
              "path": "/update-user/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/update-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserByIdLambdaVersion8NqmNMFQWXoV1u3eAQgwZXVTzdw0OOiHlMJZU0CIZY"
      },
      "loginUser": {
        "handler": "dist/controllers/controller.loginUser",
        "events": [
          {
            "httpApi": {
              "path": "/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/login"
          }
        ],
        "name": "emotio-x-backend-dev-loginUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersionOWE1IdKqtNQeqgUYSbuAoTtxtl4nM8fVhp5WoMpb2w4"
      },
      "logoutUser": {
        "handler": "dist/controllers/controller.logoutUser",
        "events": [
          {
            "httpApi": {
              "path": "/logout",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/logout"
          }
        ],
        "name": "emotio-x-backend-dev-logoutUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LogoutUserLambdaVersion1FClx1eN3GsGYqmPJJU63j6LjEWg6hwTyMCjU6zfE"
      },
      "refreshToken": {
        "handler": "dist/controllers/controller.refreshToken",
        "events": [
          {
            "httpApi": {
              "path": "/refresh-token",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/refresh-token"
          }
        ],
        "name": "emotio-x-backend-dev-refreshToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokenLambdaVersionsyqBQurRzaGB7QPQwMoTzSbT6lP8Ntr501JG0kOcCQ"
      },
      "createResearch": {
        "handler": "dist/controllers/createResearchController.createResearchWithImages",
        "events": [
          {
            "httpApi": {
              "path": "/research/create-research",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/research/create-research"
          }
        ],
        "name": "emotio-x-backend-dev-createResearch",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateResearchLambdaVersionveHv63yWa9jWdeE6SQbwTw2obYXbhQ3WynC51RBw"
      },
      "generatePresignedUrls": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "httpApi": {
              "path": "/research/generate-presigned-urls",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/research/generate-presigned-urls"
          }
        ],
        "name": "emotio-x-backend-dev-generatePresignedUrls",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GeneratePresignedUrlsLambdaVersionUljgG4CZn7ldmJgxlKrM977o03CKTGSDVk0VyQUuk"
      },
      "connect": {
        "handler": "dist/websocket/connectHandler.connectHandler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "emotio-x-backend-dev-connect",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectLambdaVersion7m4S2QqW55F2iUgxR44hWkvUBk13Nk5Te4qGWbd6ew"
      },
      "disconnect": {
        "handler": "dist/websocket/disconnectHandler.disconnectHandler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "emotio-x-backend-dev-disconnect",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DisconnectLambdaVersionG37KOrd8pGfgAYQKETNgeKO3ssGBoUNDdfLUSfBco"
      },
      "defaultHandler": {
        "handler": "dist/websocket/defaultHandler.defaultHandler",
        "events": [
          {
            "websocket": "$default"
          }
        ],
        "name": "emotio-x-backend-dev-defaultHandler",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DefaultHandlerLambdaVersion7xONPbOIr21REtTHqSDdkzWM8QZp1ffVW27zouqLI4"
      },
      "sendMessage": {
        "handler": "dist/websocket/sendMessageHandler.sendMessageHandler",
        "events": [
          {
            "websocket": {
              "route": "sendMessage"
            }
          }
        ],
        "name": "emotio-x-backend-dev-sendMessage",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendMessageLambdaVersionwYUdKKZa8lxmU5WCGWR4WPbW5qSk4QHD5SzT0DUko8"
      },
      "refresh": {
        "handler": "src/websocket/refreshHandler.refreshHandler",
        "events": [
          {
            "websocket": {
              "route": "refresh"
            }
          },
          {
            "schedule": {
              "rate": [
                "rate(15 minutes)"
              ]
            }
          }
        ],
        "name": "emotio-x-backend-dev-refresh",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshLambdaVersion55JqbVQJBrr6oXeZRaDkdIcEJYjpkzVDRG26Ol00"
      },
      "sendTemporaryPassword": {
        "handler": "dist/controllers/controller.sendTemporaryPassword",
        "events": [
          {
            "httpApi": {
              "path": "/send-temporary-password",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/send-temporary-password"
          }
        ],
        "name": "emotio-x-backend-dev-sendTemporaryPassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendTemporaryPasswordLambdaVersione6u64euTAjgiHankmechgATMNISTc9nDOFfgXN3bU"
      },
      "uploadFilesToS3": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "httpApi": {
              "path": "/upload-image",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/upload-image"
          }
        ],
        "name": "emotio-x-backend-dev-uploadFilesToS3",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UploadFilesToS3LambdaVersionlzQo6KCeEfoJCM64PQLYPQdJIB2JtXotZjweifOG7ZE"
      },
      "createScreener": {
        "handler": "dist/controllers/screenerController.createScreener",
        "events": [
          {
            "httpApi": {
              "path": "/screener",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/screener"
          }
        ],
        "name": "emotio-x-backend-dev-createScreener",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateScreenerLambdaVersionaY2e2XXazk85InBHgARQT6hiZwdXwkPoTrP5RMHq9I"
      },
      "getScreenerByResearch": {
        "handler": "dist/controllers/screenerController.getScreenerByResearch",
        "events": [
          {
            "httpApi": {
              "path": "/screener/{researchId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/screener/{researchId}"
          }
        ],
        "name": "emotio-x-backend-dev-getScreenerByResearch",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetScreenerByResearchLambdaVersionobzZKpCaHAbP02dgfe1OrGg0NT3Gh1xG5HjVqymhlM"
      },
      "updateScreener": {
        "handler": "dist/controllers/screenerController.updateScreener",
        "events": [
          {
            "httpApi": {
              "path": "/screener/{researchId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/screener/{researchId}"
          }
        ],
        "name": "emotio-x-backend-dev-updateScreener",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateScreenerLambdaVersion33TGwrpxkQehxMI0qal44iQALpaWWJ6styYyyIHnepI"
      },
      "deleteScreener": {
        "handler": "dist/controllers/screenerController.deleteScreener",
        "events": [
          {
            "httpApi": {
              "path": "/screener/{screenerId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/screener/{screenerId}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteScreener",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteScreenerLambdaVersionwyjOac6dbMFVfKodLeKBRNqdsNEkNMQWvUrgW1JbE"
      },
      "createWelcomeScreen": {
        "handler": "dist/controllers/welcomeScreenController.createWelcomeScreen",
        "events": [
          {
            "httpApi": {
              "path": "/welcome-screen",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/welcome-screen"
          }
        ],
        "name": "emotio-x-backend-dev-createWelcomeScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateWelcomeScreenLambdaVersion22MKK5yMydwGAs1Pczdnf8CcA01uZLnFgz4svKtQb8"
      },
      "getWelcomeScreenByResearch": {
        "handler": "dist/controllers/welcomeScreenController.getWelcomeScreenByResearch",
        "events": [
          {
            "httpApi": {
              "path": "/welcome-screen/{researchId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/welcome-screen/{researchId}"
          }
        ],
        "name": "emotio-x-backend-dev-getWelcomeScreenByResearch",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetWelcomeScreenByResearchLambdaVersionKl0Irw3G9zJxTeMc65oXz9R1xJrXPOdIYgWAhWIYRfE"
      },
      "updateWelcomeScreen": {
        "handler": "dist/controllers/welcomeScreenController.updateWelcomeScreen",
        "events": [
          {
            "httpApi": {
              "path": "/welcome-screen/{researchId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/welcome-screen/{researchId}"
          }
        ],
        "name": "emotio-x-backend-dev-updateWelcomeScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateWelcomeScreenLambdaVersion47zpf70fdDsGoH0q2WZ80N90pbQwvZbXqXEnIgas"
      },
      "deleteWelcomeScreen": {
        "handler": "dist/controllers/welcomeScreenController.deleteWelcomeScreen",
        "events": [
          {
            "httpApi": {
              "path": "/welcome-screen/{welcomeScreenId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/welcome-screen/{welcomeScreenId}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteWelcomeScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteWelcomeScreenLambdaVersionjd5n75QknMLsTEzwqU5KI6THN158DUkszhzJY4fWis"
      },
      "createImplicitAssociation": {
        "handler": "dist/controllers/implicitAssociationController.createImplicitAssociation",
        "events": [
          {
            "httpApi": {
              "path": "/implicit-association",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/implicit-association"
          }
        ],
        "name": "emotio-x-backend-dev-createImplicitAssociation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateImplicitAssociationLambdaVersionbeRZYz3O8k8SlSEWAONjLgmV8zoaCPIkMR0EXQAum0"
      },
      "getImplicitAssociationById": {
        "handler": "dist/controllers/implicitAssociationController.getImplicitAssociationById",
        "events": [
          {
            "httpApi": {
              "path": "/implicit-association/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/implicit-association/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getImplicitAssociationById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetImplicitAssociationByIdLambdaVersionajWWLuGbCTKPQqsOxz48lUBgVRVHTEgc0V9lpThGgQ"
      },
      "updateImplicitAssociation": {
        "handler": "dist/controllers/implicitAssociationController.updateImplicitAssociation",
        "events": [
          {
            "httpApi": {
              "path": "/implicit-association/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/implicit-association/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateImplicitAssociation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateImplicitAssociationLambdaVersionnaBKWWUmMcS8tR7iDLMzb3JcSNxwoDYrsrhn1YI"
      },
      "deleteImplicitAssociation": {
        "handler": "dist/controllers/implicitAssociationController.deleteImplicitAssociation",
        "events": [
          {
            "httpApi": {
              "path": "/implicit-association/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/implicit-association/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteImplicitAssociation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteImplicitAssociationLambdaVersion61rmTb79SawKxkwIVjwl5Sd0QIwQVhMN2qfgmbNo7o4"
      },
      "createCognitiveTask": {
        "handler": "dist/controllers/cognitiveTaskController.createCognitiveTask",
        "events": [
          {
            "httpApi": {
              "path": "/cognitive-task",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cognitive-task"
          }
        ],
        "name": "emotio-x-backend-dev-createCognitiveTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateCognitiveTaskLambdaVersionf8peKEUR3TNiLXng1BPLrwI8ZLYgke8d4BmEkO0W7I"
      },
      "getCognitiveTaskById": {
        "handler": "dist/controllers/cognitiveTaskController.getCognitiveTaskById",
        "events": [
          {
            "httpApi": {
              "path": "/cognitive-task/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cognitive-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getCognitiveTaskById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCognitiveTaskByIdLambdaVersionQLb3l8XrEMOtryAgjSElZVmilT6bnpRymSs1TFNVMxI"
      },
      "updateCognitiveTask": {
        "handler": "dist/controllers/cognitiveTaskController.updateCognitiveTask",
        "events": [
          {
            "httpApi": {
              "path": "/cognitive-task/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cognitive-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateCognitiveTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateCognitiveTaskLambdaVersionW98sgRp0Tg2atx506N4LtYueKESi8jSsziEYGOzCU"
      },
      "deleteCognitiveTask": {
        "handler": "dist/controllers/cognitiveTaskController.deleteCognitiveTask",
        "events": [
          {
            "httpApi": {
              "path": "/cognitive-task/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cognitive-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteCognitiveTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteCognitiveTaskLambdaVersionpzQAvAdqf2OAcRpiuLInD7aFukPJsmLODvOicQJw"
      },
      "createEyeTrackingTask": {
        "handler": "dist/controllers/eyeTrackingController.createEyeTrackingTask",
        "events": [
          {
            "httpApi": {
              "path": "/eye-tracking-task",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/eye-tracking-task"
          }
        ],
        "name": "emotio-x-backend-dev-createEyeTrackingTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateEyeTrackingTaskLambdaVersionyd1YISfr3QRB42A54aOn17tXeIkNDJa6aEZnFYfp68"
      },
      "getEyeTrackingTaskById": {
        "handler": "dist/controllers/eyeTrackingController.getEyeTrackingTaskById",
        "events": [
          {
            "httpApi": {
              "path": "/eye-tracking-task/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/eye-tracking-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getEyeTrackingTaskById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetEyeTrackingTaskByIdLambdaVersionLtq7WRHlwKSKOkjx2xGMW4Ipl22a5kuU4Yy0cQeA"
      },
      "updateEyeTrackingTask": {
        "handler": "dist/controllers/eyeTrackingController.updateEyeTrackingTask",
        "events": [
          {
            "httpApi": {
              "path": "/eye-tracking-task/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/eye-tracking-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateEyeTrackingTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateEyeTrackingTaskLambdaVersionQBg7dlbjvqa64xGAMGOdslfTxROfxGgDLtBjNJWRSk"
      },
      "deleteEyeTrackingTask": {
        "handler": "dist/controllers/eyeTrackingController.deleteEyeTrackingTask",
        "events": [
          {
            "httpApi": {
              "path": "/eye-tracking-task/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/eye-tracking-task/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteEyeTrackingTask",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteEyeTrackingTaskLambdaVersion1xEiGtQIso3pgAPosUvgaXBU9iWXveOk2aQTywzuLs"
      },
      "createThankYouScreen": {
        "handler": "dist/controllers/thankYouScreenController.createThankYouScreen",
        "events": [
          {
            "httpApi": {
              "path": "/thank-you-screen",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/thank-you-screen"
          }
        ],
        "name": "emotio-x-backend-dev-createThankYouScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateThankYouScreenLambdaVersion9b6Ie7ih6vAcsYUammRFbyrbeRyfrlPFswk4C81w"
      },
      "getThankYouScreenById": {
        "handler": "dist/controllers/thankYouScreenController.getThankYouScreenById",
        "events": [
          {
            "httpApi": {
              "path": "/thank-you-screen/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/thank-you-screen/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getThankYouScreenById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetThankYouScreenByIdLambdaVersionhHMp2SinkKhzHDqVkPmtqOZv2HAqbc2SmJSHHW84Q"
      },
      "updateThankYouScreen": {
        "handler": "dist/controllers/thankYouScreenController.updateThankYouScreen",
        "events": [
          {
            "httpApi": {
              "path": "/thank-you-screen/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/thank-you-screen/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateThankYouScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateThankYouScreenLambdaVersionRFnkE5YteOeHe4mH0wnsiEqiIHB6UlS1dXyjNRxM"
      },
      "deleteThankYouScreen": {
        "handler": "dist/controllers/thankYouScreenController.deleteThankYouScreen",
        "events": [
          {
            "httpApi": {
              "path": "/thank-you-screen/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/thank-you-screen/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteThankYouScreen",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteThankYouScreenLambdaVersionvb3DFxZn32EzCbmTp1jTgBj6UmleEaJK5aaQqZDivY"
      }
    },
    "resources": {
      "Resources": {
        "WebSocketLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/websocket/emotio-x-backend-dev-unique",
            "RetentionInDays": 14
          }
        },
        "DeploymentBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "emotio-x-backend-dev-deployment-bucket",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            },
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "ApiGatewayLoggingRoleAuthBackend": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "api-gateway-emotioX-backend",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "apigateway.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
          }
        },
        "ResearchImagesBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "emotiox-backend-dev-bucket",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "WebSocketConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "emotio-x-backend-dev-WebSocketConnections",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WebSocketApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "emotio-x-backend-dev-WebSocketApi",
            "ProtocolType": "WEBSOCKET",
            "RouteSelectionExpression": "$request.body.action"
          }
        }
      },
      "Outputs": {
        "ApiUrl": {
          "Description": "URL base de la API desplegada",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
          }
        },
        "WelcomeScreenApiUrl": {
          "Description": "URL para las rutas de WelcomeScreen",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/welcome-screen"
          }
        },
        "ScreenerApiUrl": {
          "Description": "URL para las rutas de Screener",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/screener"
          }
        },
        "ImplicitAssociationApiUrl": {
          "Description": "URL para las rutas de Implicit Association",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/implicit-association"
          }
        },
        "CognitiveTaskApiUrl": {
          "Description": "URL para las rutas de Cognitive Task",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/cognitive-task"
          }
        },
        "EyeTrackingApiUrl": {
          "Description": "URL para las rutas de Eye Tracking Task",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/eye-tracking-task"
          }
        },
        "ThankYouScreenApiUrl": {
          "Description": "URL para las rutas de Thank You Screen",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/thank-you-screen"
          }
        },
        "WebSocketApiEndpoint": {
          "Description": "WebSocket API Endpoint",
          "Value": {
            "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
          }
        },
        "S3BucketName": {
          "Description": "Nombre del bucket de S3 para este entorno",
          "Value": {
            "Ref": "DeploymentBucket"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "emotio-x-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/emotio-x-backend/dev/1738149643954-2025-01-29T11:20:43.954Z",
    "artifact": "emotio-x-backend.zip"
  }
}