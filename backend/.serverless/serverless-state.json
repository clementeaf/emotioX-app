{
  "service": {
    "service": "emotio-x-backend",
    "serviceObject": {
      "name": "emotio-x-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "profile": "default",
      "websocketsApiName": "dev-emotio-x-backend-websockets",
      "websocketsApiRouteSelectionExpression": "$request.body.action",
      "logs": {
        "httpApi": {
          "format": "$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId"
        },
        "websocket": true
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:3000"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "DELETE",
            "PUT",
            "OPTIONS"
          ],
          "allowCredentials": true
        }
      },
      "environment": {
        "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
        "WEBSOCKET_ENDPOINT": {
          "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        },
        "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/@connections/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/emotio-x-backend-dev-WebSocketConnections"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket",
                "arn:aws:s3:::emotio-x-backend-dev-deployment-bucket/*"
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-registerUser"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getAllUsers"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-getUserById"
            }
          },
          "DeleteUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-deleteUserById"
            }
          },
          "UpdateUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-updateUserById"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-loginUser"
            }
          },
          "LogoutUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-logoutUser"
            }
          },
          "RefreshTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refreshToken"
            }
          },
          "CreateResearchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-createResearch"
            }
          },
          "GeneratePresignedUrlsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-generatePresignedUrls"
            }
          },
          "ConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-connect"
            }
          },
          "DisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-disconnect"
            }
          },
          "DefaultHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-defaultHandler"
            }
          },
          "SendMessageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendMessage"
            }
          },
          "RefreshLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-refresh"
            }
          },
          "SendTemporaryPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-sendTemporaryPassword"
            }
          },
          "UploadFilesToS3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotio-x-backend-dev-uploadFilesToS3"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "emotio-x-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotio-x-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "emotio-x-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.registerUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-registerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.getAllUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.getUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "DeleteUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.deleteUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-deleteUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserByIdLogGroup"
            ]
          },
          "UpdateUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.updateUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-updateUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserByIdLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.loginUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-loginUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "LogoutUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.logoutUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-logoutUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutUserLogGroup"
            ]
          },
          "RefreshTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.refreshToken",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-refreshToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshTokenLogGroup"
            ]
          },
          "CreateResearchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/createResearchController.createResearchWithImages",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-createResearch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateResearchLogGroup"
            ]
          },
          "GeneratePresignedUrlsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-generatePresignedUrls",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GeneratePresignedUrlsLogGroup"
            ]
          },
          "ConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/connectHandler.connectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-connect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectLogGroup"
            ]
          },
          "DisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/disconnectHandler.disconnectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-disconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectLogGroup"
            ]
          },
          "DefaultHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/defaultHandler.defaultHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-defaultHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DefaultHandlerLogGroup"
            ]
          },
          "SendMessageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/websocket/sendMessageHandler.sendMessageHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-sendMessage",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendMessageLogGroup"
            ]
          },
          "RefreshLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "src/websocket/refreshHandler.refreshHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-refresh",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshLogGroup"
            ]
          },
          "SendTemporaryPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/controller.sendTemporaryPassword",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-sendTemporaryPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendTemporaryPasswordLogGroup"
            ]
          },
          "UploadFilesToS3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/emotio-x-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotio-x-backend-dev-uploadFilesToS3",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CONNECTIONS_TABLE": "emotio-x-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  },
                  "S3_BUCKET_NAME": "emotio-x-backend-dev-deployment-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFilesToS3LogGroup"
            ]
          },
          "RegisterUserLambdaVersionh0eBvRJngLTOrES161Nc1FG7iF5TvI1hu8BfQUkb6aU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "GetAllUsersLambdaVersionvFLT3I4EJTD2bTT6AYmcyYPOwKOG3lYxfE1Ibae8HD8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "GetUserByIdLambdaVersion35Cx6zHnf8P6kzPHa2UDN24dtrJGStYAo4gulVlt38": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "DeleteUserByIdLambdaVersionvXbXkxokUHWK5fZ3NtzYDtkovjlwkKlOUejfdB2sdY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserByIdLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "UpdateUserByIdLambdaVersionQzGTE561F1UFanq71BaQQxikzFJXYZuvl2CNTpfUUOg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserByIdLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "LoginUserLambdaVersion1hv26uGSURlz9Jmc8L5e9mbYROX1tqxK8PkLgEWUnwY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "LogoutUserLambdaVersioni7PmbmUEbgVj0mqDSvGBfd1nW5Lr4vLiMYqxsD0Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutUserLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "RefreshTokenLambdaVersionFvbLLvJ7FNKllQZQAPsEYc8RJt5nC4orTHEGarhtrs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokenLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "CreateResearchLambdaVersionwFnxx9Z6nrvslQWEiz7ZqCR2Y4ZttxoGuvxAVzvUDtg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateResearchLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "GeneratePresignedUrlsLambdaVersionNcJ4lLqJtZyUdNOTUUXsOIQAhhCw6Ww62CJVNOms": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GeneratePresignedUrlsLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "ConnectLambdaVersionyb5PRfA5tekSPjssPSwAW7qgpAhF7fnVlNEafze3U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "DisconnectLambdaVersionvXfO66MJdSINXztQeXML1n3GP9VDagBNZbMPLKsirI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "DefaultHandlerLambdaVersionQAK3nBvgcCAzh7LugJdgYlRqhKbcktnSSwf8sNU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultHandlerLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "SendMessageLambdaVersionS9a1fByNAhn4H6rBLCAXeqfEsd1h3XcMwwVZUqvZg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendMessageLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "RefreshLambdaVersionsWuwOirPBlkH7m45BJ9ucpZMqkUo60vxbD3fLIpak": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "SendTemporaryPasswordLambdaVersion1nQmPpoORGlHUUT3mu9XpMQgghU76ZIQcWSlfHOO550": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendTemporaryPasswordLambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "UploadFilesToS3LambdaVersionwY1VKkC8XM3FoiW7y92tt8UiwpMnTV6mSLN2oJAxXg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFilesToS3LambdaFunction"
              },
              "CodeSha256": "xPp3U/GtWrc0cRIjDuV8jKLSnYiR9Bv/SdEUERp+aPg="
            }
          },
          "RefreshEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(15 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RefreshLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "refreshSchedule"
                }
              ]
            }
          },
          "RefreshLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RefreshEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotio-x-backend-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DefaultHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "SendMessageWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SendMessageLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "RefreshWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RefreshLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DefaultHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DefaultHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SendMessageLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "SendMessageLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendMessageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "RefreshLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "RefreshLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DefaultHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "sendMessageWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "sendMessage",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "SendMessageWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "refreshWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "refresh",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "RefreshWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DefaultRouteSettings": {
                "DataTraceEnabled": true,
                "LoggingLevel": "INFO"
              },
              "AccessLogSettings": {
                "DestinationArn": {
                  "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WebsocketsLogGroup}"
                },
                "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.eventType $context.routeKey $context.connectionId\" $context.requestId"
              },
              "DeploymentId": {
                "Ref": "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs"
              }
            }
          },
          "WebsocketsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/websocket/emotio-x-backend-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "emotio-x-backend",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z/custom-resources.zip"
              },
              "FunctionName": "emotio-x-backend-dev-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs18.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "WebsocketsDeployment124zJR1Sq2iPwjV8tovd88CJMl2D0wDcRSeCMFCjJs": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute",
              "sendMessageWebsocketsRoute",
              "refreshWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotio-x-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": true,
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "DELETE",
                  "PUT",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:3000"
                ]
              }
            }
          },
          "HttpApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/http-api/emotio-x-backend-dev"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "AccessLogSettings": {
                "DestinationArn": {
                  "Fn::GetAtt": [
                    "HttpApiLogGroup",
                    "Arn"
                  ]
                },
                "Format": "$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId"
              }
            },
            "DependsOn": "HttpApiLogGroup"
          },
          "RegisterUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRegister": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /register",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterUser"
          },
          "GetAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashallDashusers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-all-users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllUsers"
          },
          "GetUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserById"
          },
          "DeleteUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteDeleteDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /delete-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUserById"
          },
          "UpdateUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUpdateDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /update-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUserById"
          },
          "LoginUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLoginUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLoginUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLoginUser"
          },
          "LogoutUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogoutUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LogoutUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogoutUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogoutUser"
          },
          "RefreshTokenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRefreshToken": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRefreshDashtoken": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /refresh-token",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRefreshToken"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRefreshToken"
          },
          "CreateResearchLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateResearchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateResearch": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateResearchLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostResearchCreateDashresearch": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /research/create-research",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateResearch"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateResearch"
          },
          "GeneratePresignedUrlsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GeneratePresignedUrlsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGeneratePresignedUrls": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GeneratePresignedUrlsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostResearchGenerateDashpresignedDashurls": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /research/generate-presigned-urls",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGeneratePresignedUrls"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGeneratePresignedUrls"
          },
          "SendTemporaryPasswordLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendTemporaryPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendTemporaryPassword": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendTemporaryPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostSendDashtemporaryDashpassword": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /send-temporary-password",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendTemporaryPassword"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendTemporaryPassword"
          },
          "UploadFilesToS3LambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadFilesToS3LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadFilesToS3": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadFilesToS3LambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUploadDashimage": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /upload-image",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadFilesToS3"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadFilesToS3"
          },
          "WebSocketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/websocket/emotio-x-backend-dev-unique",
              "RetentionInDays": 14
            }
          },
          "DeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "emotio-x-backend-dev-deployment-bucket",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              },
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "ApiGatewayLoggingRoleAuthBackend": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "api-gateway-emotioX-backend",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            }
          },
          "ResearchImagesBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "emotiox-backend-dev-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "emotio-x-backend-dev-WebSocketConnections",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WebSocketApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "emotio-x-backend-dev-WebSocketApi",
              "ProtocolType": "WEBSOCKET",
              "RouteSelectionExpression": "$request.body.action"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersionh0eBvRJngLTOrES161Nc1FG7iF5TvI1hu8BfQUkb6aU"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionvFLT3I4EJTD2bTT6AYmcyYPOwKOG3lYxfE1Ibae8HD8"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersion35Cx6zHnf8P6kzPHa2UDN24dtrJGStYAo4gulVlt38"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserByIdLambdaVersionvXbXkxokUHWK5fZ3NtzYDtkovjlwkKlOUejfdB2sdY"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DeleteUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserByIdLambdaVersionQzGTE561F1UFanq71BaQQxikzFJXYZuvl2CNTpfUUOg"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UpdateUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersion1hv26uGSURlz9Jmc8L5e9mbYROX1tqxK8PkLgEWUnwY"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "LogoutUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutUserLambdaVersioni7PmbmUEbgVj0mqDSvGBfd1nW5Lr4vLiMYqxsD0Q"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-LogoutUserLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokenLambdaVersionFvbLLvJ7FNKllQZQAPsEYc8RJt5nC4orTHEGarhtrs"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RefreshTokenLambdaFunctionQualifiedArn"
            }
          },
          "CreateResearchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateResearchLambdaVersionwFnxx9Z6nrvslQWEiz7ZqCR2Y4ZttxoGuvxAVzvUDtg"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-CreateResearchLambdaFunctionQualifiedArn"
            }
          },
          "GeneratePresignedUrlsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GeneratePresignedUrlsLambdaVersionNcJ4lLqJtZyUdNOTUUXsOIQAhhCw6Ww62CJVNOms"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-GeneratePresignedUrlsLambdaFunctionQualifiedArn"
            }
          },
          "ConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectLambdaVersionyb5PRfA5tekSPjssPSwAW7qgpAhF7fnVlNEafze3U"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ConnectLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectLambdaVersionvXfO66MJdSINXztQeXML1n3GP9VDagBNZbMPLKsirI"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DisconnectLambdaFunctionQualifiedArn"
            }
          },
          "DefaultHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultHandlerLambdaVersionQAK3nBvgcCAzh7LugJdgYlRqhKbcktnSSwf8sNU"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-DefaultHandlerLambdaFunctionQualifiedArn"
            }
          },
          "SendMessageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendMessageLambdaVersionS9a1fByNAhn4H6rBLCAXeqfEsd1h3XcMwwVZUqvZg"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-SendMessageLambdaFunctionQualifiedArn"
            }
          },
          "RefreshLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshLambdaVersionsWuwOirPBlkH7m45BJ9ucpZMqkUo60vxbD3fLIpak"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-RefreshLambdaFunctionQualifiedArn"
            }
          },
          "SendTemporaryPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendTemporaryPasswordLambdaVersion1nQmPpoORGlHUUT3mu9XpMQgghU76ZIQcWSlfHOO550"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-SendTemporaryPasswordLambdaFunctionQualifiedArn"
            }
          },
          "UploadFilesToS3LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFilesToS3LambdaVersionwY1VKkC8XM3FoiW7y92tt8UiwpMnTV6mSLN2oJAxXg"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-UploadFilesToS3LambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotio-x-backend-dev-HttpApiUrl"
            }
          },
          "ApiUrl": {
            "Description": "URL base de la API desplegada",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            }
          },
          "WebSocketApiEndpoint": {
            "Description": "WebSocket API Endpoint",
            "Value": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            }
          },
          "S3BucketName": {
            "Description": "Nombre del bucket de S3 para este entorno",
            "Value": {
              "Ref": "DeploymentBucket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "s3BucketName": "emotio-x-backend-dev-deployment-bucket",
      "webpack": {
        "includeModules": {
          "forceExclude": [
            "aws-sdk",
            "argon2"
          ]
        }
      }
    },
    "plugins": [
      "serverless-esbuild",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "registerUser": {
        "handler": "dist/controllers/controller.registerUser",
        "events": [
          {
            "httpApi": {
              "path": "/register",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/register"
          }
        ],
        "name": "emotio-x-backend-dev-registerUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersionh0eBvRJngLTOrES161Nc1FG7iF5TvI1hu8BfQUkb6aU"
      },
      "getAllUsers": {
        "handler": "dist/controllers/controller.getAllUsers",
        "events": [
          {
            "httpApi": {
              "path": "/get-all-users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-all-users"
          }
        ],
        "name": "emotio-x-backend-dev-getAllUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionvFLT3I4EJTD2bTT6AYmcyYPOwKOG3lYxfE1Ibae8HD8"
      },
      "getUserById": {
        "handler": "dist/controllers/controller.getUserById",
        "events": [
          {
            "httpApi": {
              "path": "/get-user/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-getUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIdLambdaVersion35Cx6zHnf8P6kzPHa2UDN24dtrJGStYAo4gulVlt38"
      },
      "deleteUserById": {
        "handler": "dist/controllers/controller.deleteUserById",
        "events": [
          {
            "httpApi": {
              "path": "/delete-user/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/delete-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-deleteUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserByIdLambdaVersionvXbXkxokUHWK5fZ3NtzYDtkovjlwkKlOUejfdB2sdY"
      },
      "updateUserById": {
        "handler": "dist/controllers/controller.updateUserById",
        "events": [
          {
            "httpApi": {
              "path": "/update-user/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/update-user/{id}"
          }
        ],
        "name": "emotio-x-backend-dev-updateUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserByIdLambdaVersionQzGTE561F1UFanq71BaQQxikzFJXYZuvl2CNTpfUUOg"
      },
      "loginUser": {
        "handler": "dist/controllers/controller.loginUser",
        "events": [
          {
            "httpApi": {
              "path": "/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/login"
          }
        ],
        "name": "emotio-x-backend-dev-loginUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersion1hv26uGSURlz9Jmc8L5e9mbYROX1tqxK8PkLgEWUnwY"
      },
      "logoutUser": {
        "handler": "dist/controllers/controller.logoutUser",
        "events": [
          {
            "httpApi": {
              "path": "/logout",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/logout"
          }
        ],
        "name": "emotio-x-backend-dev-logoutUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LogoutUserLambdaVersioni7PmbmUEbgVj0mqDSvGBfd1nW5Lr4vLiMYqxsD0Q"
      },
      "refreshToken": {
        "handler": "dist/controllers/controller.refreshToken",
        "events": [
          {
            "httpApi": {
              "path": "/refresh-token",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/refresh-token"
          }
        ],
        "name": "emotio-x-backend-dev-refreshToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokenLambdaVersionFvbLLvJ7FNKllQZQAPsEYc8RJt5nC4orTHEGarhtrs"
      },
      "createResearch": {
        "handler": "dist/controllers/createResearchController.createResearchWithImages",
        "events": [
          {
            "httpApi": {
              "path": "/research/create-research",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/research/create-research"
          }
        ],
        "name": "emotio-x-backend-dev-createResearch",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateResearchLambdaVersionwFnxx9Z6nrvslQWEiz7ZqCR2Y4ZttxoGuvxAVzvUDtg"
      },
      "generatePresignedUrls": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "httpApi": {
              "path": "/research/generate-presigned-urls",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/research/generate-presigned-urls"
          }
        ],
        "name": "emotio-x-backend-dev-generatePresignedUrls",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GeneratePresignedUrlsLambdaVersionNcJ4lLqJtZyUdNOTUUXsOIQAhhCw6Ww62CJVNOms"
      },
      "connect": {
        "handler": "dist/websocket/connectHandler.connectHandler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "emotio-x-backend-dev-connect",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectLambdaVersionyb5PRfA5tekSPjssPSwAW7qgpAhF7fnVlNEafze3U"
      },
      "disconnect": {
        "handler": "dist/websocket/disconnectHandler.disconnectHandler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "emotio-x-backend-dev-disconnect",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DisconnectLambdaVersionvXfO66MJdSINXztQeXML1n3GP9VDagBNZbMPLKsirI"
      },
      "defaultHandler": {
        "handler": "dist/websocket/defaultHandler.defaultHandler",
        "events": [
          {
            "websocket": "$default"
          }
        ],
        "name": "emotio-x-backend-dev-defaultHandler",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DefaultHandlerLambdaVersionQAK3nBvgcCAzh7LugJdgYlRqhKbcktnSSwf8sNU"
      },
      "sendMessage": {
        "handler": "dist/websocket/sendMessageHandler.sendMessageHandler",
        "events": [
          {
            "websocket": {
              "route": "sendMessage"
            }
          }
        ],
        "name": "emotio-x-backend-dev-sendMessage",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendMessageLambdaVersionS9a1fByNAhn4H6rBLCAXeqfEsd1h3XcMwwVZUqvZg"
      },
      "refresh": {
        "handler": "src/websocket/refreshHandler.refreshHandler",
        "events": [
          {
            "websocket": {
              "route": "refresh"
            }
          },
          {
            "schedule": {
              "rate": [
                "rate(15 minutes)"
              ]
            }
          }
        ],
        "name": "emotio-x-backend-dev-refresh",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshLambdaVersionsWuwOirPBlkH7m45BJ9ucpZMqkUo60vxbD3fLIpak"
      },
      "sendTemporaryPassword": {
        "handler": "dist/controllers/controller.sendTemporaryPassword",
        "events": [
          {
            "httpApi": {
              "path": "/send-temporary-password",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/send-temporary-password"
          }
        ],
        "name": "emotio-x-backend-dev-sendTemporaryPassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendTemporaryPasswordLambdaVersion1nQmPpoORGlHUUT3mu9XpMQgghU76ZIQcWSlfHOO550"
      },
      "uploadFilesToS3": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "httpApi": {
              "path": "/upload-image",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/upload-image"
          }
        ],
        "name": "emotio-x-backend-dev-uploadFilesToS3",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UploadFilesToS3LambdaVersionwY1VKkC8XM3FoiW7y92tt8UiwpMnTV6mSLN2oJAxXg"
      }
    },
    "resources": {
      "Resources": {
        "WebSocketLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/websocket/emotio-x-backend-dev-unique",
            "RetentionInDays": 14
          }
        },
        "DeploymentBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "emotio-x-backend-dev-deployment-bucket",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            },
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "ApiGatewayLoggingRoleAuthBackend": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "api-gateway-emotioX-backend",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "apigateway.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
          }
        },
        "ResearchImagesBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "emotiox-backend-dev-bucket",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "WebSocketConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "emotio-x-backend-dev-WebSocketConnections",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WebSocketApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "emotio-x-backend-dev-WebSocketApi",
            "ProtocolType": "WEBSOCKET",
            "RouteSelectionExpression": "$request.body.action"
          }
        }
      },
      "Outputs": {
        "ApiUrl": {
          "Description": "URL base de la API desplegada",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
          }
        },
        "WebSocketApiEndpoint": {
          "Description": "WebSocket API Endpoint",
          "Value": {
            "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
          }
        },
        "S3BucketName": {
          "Description": "Nombre del bucket de S3 para este entorno",
          "Value": {
            "Ref": "DeploymentBucket"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "emotio-x-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/emotio-x-backend/dev/1737329393857-2025-01-19T23:29:53.857Z",
    "artifact": "emotio-x-backend.zip"
  }
}