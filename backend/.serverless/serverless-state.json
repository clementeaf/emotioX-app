{
  "service": {
    "service": "emotioX-backend",
    "serviceObject": {
      "name": "emotioX-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "profile": "default",
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:5173"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "DELETE",
            "PUT",
            "OPTIONS"
          ],
          "allowCredentials": true
        }
      },
      "environment": {
        "JWT_SECRET": "default_secret",
        "JWT_REFRESH_SECRET": "default_refresh_secret",
        "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
        "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
        "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": "arn:aws:execute-api:*:*:*/@connections/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/emotioX-backend-dev-WebSocketConnections"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::emotiox-backend-dev-bucket",
                "arn:aws:s3:::emotiox-backend-dev-bucket/*"
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-registerUser"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-getAllUsers"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-getUserById"
            }
          },
          "DeleteUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-deleteUserById"
            }
          },
          "UpdateUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-updateUserById"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-loginUser"
            }
          },
          "LogoutUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-logoutUser"
            }
          },
          "RefreshTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-refreshToken"
            }
          },
          "CreateResearchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-createResearch"
            }
          },
          "GeneratePresignedUrlsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-generatePresignedUrls"
            }
          },
          "ConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-connect"
            }
          },
          "DisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-disconnect"
            }
          },
          "RefreshLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-refresh"
            }
          },
          "SendTemporaryPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-sendTemporaryPassword"
            }
          },
          "UploadFilesToS3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/emotioX-backend-dev-uploadFilesToS3"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "emotioX-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotioX-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/emotioX-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "emotioX-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.registerUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-registerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.getAllUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.getUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "DeleteUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.deleteUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-deleteUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserByIdLogGroup"
            ]
          },
          "UpdateUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.updateUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-updateUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserByIdLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.loginUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-loginUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "LogoutUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.logoutUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-logoutUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutUserLogGroup"
            ]
          },
          "RefreshTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.refreshToken",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-refreshToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshTokenLogGroup"
            ]
          },
          "CreateResearchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/createResearchController.createResearchWithImages",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-createResearch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateResearchLogGroup"
            ]
          },
          "GeneratePresignedUrlsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-generatePresignedUrls",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GeneratePresignedUrlsLogGroup"
            ]
          },
          "ConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/websocket/connectHandler.connectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-connect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectLogGroup"
            ]
          },
          "DisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/websocket/disconnectHandler.disconnectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-disconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectLogGroup"
            ]
          },
          "RefreshLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "src/websocket/refreshHandler.refreshHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-refresh",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshLogGroup"
            ]
          },
          "SendTemporaryPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/controller.sendTemporaryPassword",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-sendTemporaryPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendTemporaryPasswordLogGroup"
            ]
          },
          "UploadFilesToS3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z/emotioX-backend.zip"
              },
              "Handler": "dist/controllers/imageController.uploadFilesToS3",
              "Runtime": "nodejs18.x",
              "FunctionName": "emotioX-backend-dev-uploadFilesToS3",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "JWT_SECRET": "default_secret",
                  "JWT_REFRESH_SECRET": "default_refresh_secret",
                  "CONNECTIONS_TABLE": "emotioX-backend-dev-WebSocketConnections",
                  "WEBSOCKET_ENDPOINT": "https://cqt41bondd.execute-api.us-east-1.amazonaws.com/dev",
                  "S3_BUCKET_NAME": "emotioX-backend-dev-bucket"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFilesToS3LogGroup"
            ]
          },
          "RegisterUserLambdaVersionflvDdc9NGDPDzCLE5YCXNjbdPW389b5AvlL2w6BJk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "GetAllUsersLambdaVersioniWevh7z3LxNRQ730YF6cjdQbEO0vWhfGpYvwp4eP0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "GetUserByIdLambdaVersion27eEvS9wrq6nd5fa53aTA7GD2pVertBM1CnjnyXXBU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "DeleteUserByIdLambdaVersioneBB0YQA0dh35tr7vfdIm5gYszxT4yUjx3AzTPDOac": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserByIdLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "UpdateUserByIdLambdaVersionAJCHkZVGaI5mW6OwX69jt4oPvUqGXJS6SBUnWg133E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserByIdLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "LoginUserLambdaVersionyX0pEx83ccM6kAIeY9xgMFQAYzrFTE1CnCnZ4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "LogoutUserLambdaVersionwB01zuTaguHID6kXZfDdU4AhLJzqHl8t4hQ0OYykddI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutUserLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "RefreshTokenLambdaVersionHdBFKnSQTQuAyd5AmdJS2CpYaRPEmh0q5E20kHTrY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokenLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "CreateResearchLambdaVersionhzAIkWMO2d6MnkzhxMB1S9mVLzkGJzE6ekbdoRVPM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateResearchLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "GeneratePresignedUrlsLambdaVersionZAOf8NzvL2EbyufJHWhMXx9292DXixYvYGTCwq7E0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GeneratePresignedUrlsLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "ConnectLambdaVersion9eHcmK3wYFrccpO7PVToo2txzdErXhSfjCqyMWLpk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "DisconnectLambdaVersionO7j8IT14rWcbVvFaugcjCxH4I8WKilyDgome7y8FqQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "RefreshLambdaVersionNQI8aoI1dy0zTXWVelnmCYnIcNoWx3Q7tvqAhXTnN4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "SendTemporaryPasswordLambdaVersionxzJuMgGRwiGyZwk8lY8TzvbqUB6QKj8xqgRMm51M4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendTemporaryPasswordLambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "UploadFilesToS3LambdaVersion8YlhL83tYmfyZdE4oqDkHyz7OonHdKn1S6A8c3ZgI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFilesToS3LambdaFunction"
              },
              "CodeSha256": "AhfV7H+O2Ox1mGAynaJF3zyBqsczly0xK2du8gS4xdY="
            }
          },
          "RefreshEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(15 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RefreshLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "refreshSchedule"
                }
              ]
            }
          },
          "RefreshLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RefreshEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-emotioX-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceResearch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "research",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResearchCreateDashresearch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResearch"
              },
              "PathPart": "create-research",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResearchGenerateDashpresignedDashurls": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResearch"
              },
              "PathPart": "generate-presigned-urls",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResearchCreateDashresearchOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResearchCreateDashresearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResearchGenerateDashpresignedDashurlsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResearchGenerateDashpresignedDashurls"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResearchCreateDashresearchPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResearchCreateDashresearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateResearchLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateResearchLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResearchGenerateDashpresignedDashurlsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResearchGenerateDashpresignedDashurls"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GeneratePresignedUrlsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GeneratePresignedUrlsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1733239717321": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodResearchCreateDashresearchOptions",
              "ApiGatewayMethodResearchGenerateDashpresignedDashurlsOptions",
              "ApiGatewayMethodResearchCreateDashresearchPost",
              "ApiGatewayMethodResearchGenerateDashpresignedDashurlsPost"
            ]
          },
          "CreateResearchLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateResearchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GeneratePresignedUrlsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GeneratePresignedUrlsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotioX-backend-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "RefreshWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RefreshLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "RefreshLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "RefreshLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "refreshWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "refresh",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "RefreshWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentFzZUPfGAidyyUc0FS7f0cuNp8Pl5ZFBWl357Hzm2EQ"
              }
            }
          },
          "WebsocketsDeploymentFzZUPfGAidyyUc0FS7f0cuNp8Pl5ZFBWl357Hzm2EQ": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "refreshWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-emotioX-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": true,
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "DELETE",
                  "PUT",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:5173"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "RegisterUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRegister": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /register",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterUser"
          },
          "GetAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashallDashusers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-all-users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllUsers"
          },
          "GetUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserById"
          },
          "DeleteUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteDeleteDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /delete-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUserById"
          },
          "UpdateUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUpdateDashuserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /update-user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUserById"
          },
          "LoginUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLoginUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLoginUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLoginUser"
          },
          "LogoutUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogoutUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LogoutUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogoutUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogoutUser"
          },
          "RefreshTokenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRefreshToken": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRefreshDashtoken": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /refresh-token",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRefreshToken"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRefreshToken"
          },
          "SendTemporaryPasswordLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendTemporaryPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendTemporaryPassword": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendTemporaryPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostSendDashtemporaryDashpassword": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /send-temporary-password",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendTemporaryPassword"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendTemporaryPassword"
          },
          "UploadFilesToS3LambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadFilesToS3LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadFilesToS3": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadFilesToS3LambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUploadDashimage": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /upload-image",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadFilesToS3"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadFilesToS3"
          },
          "ApiGatewayLoggingRoleAuthBackend": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "api-gateway-emotioX-backend",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            }
          },
          "ResearchImagesBucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
              "BucketName": "emotiox-backend-dev-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "emotioX-backend-dev-WebSocketConnections",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WebSocketApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "emotioX-backend-dev-WebSocketApi",
              "ProtocolType": "WEBSOCKET",
              "RouteSelectionExpression": "$request.body.action"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersionflvDdc9NGDPDzCLE5YCXNjbdPW389b5AvlL2w6BJk"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersioniWevh7z3LxNRQ730YF6cjdQbEO0vWhfGpYvwp4eP0"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersion27eEvS9wrq6nd5fa53aTA7GD2pVertBM1CnjnyXXBU"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserByIdLambdaVersioneBB0YQA0dh35tr7vfdIm5gYszxT4yUjx3AzTPDOac"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-DeleteUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserByIdLambdaVersionAJCHkZVGaI5mW6OwX69jt4oPvUqGXJS6SBUnWg133E"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-UpdateUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersionyX0pEx83ccM6kAIeY9xgMFQAYzrFTE1CnCnZ4"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "LogoutUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutUserLambdaVersionwB01zuTaguHID6kXZfDdU4AhLJzqHl8t4hQ0OYykddI"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-LogoutUserLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokenLambdaVersionHdBFKnSQTQuAyd5AmdJS2CpYaRPEmh0q5E20kHTrY"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-RefreshTokenLambdaFunctionQualifiedArn"
            }
          },
          "CreateResearchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateResearchLambdaVersionhzAIkWMO2d6MnkzhxMB1S9mVLzkGJzE6ekbdoRVPM"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-CreateResearchLambdaFunctionQualifiedArn"
            }
          },
          "GeneratePresignedUrlsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GeneratePresignedUrlsLambdaVersionZAOf8NzvL2EbyufJHWhMXx9292DXixYvYGTCwq7E0"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-GeneratePresignedUrlsLambdaFunctionQualifiedArn"
            }
          },
          "ConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectLambdaVersion9eHcmK3wYFrccpO7PVToo2txzdErXhSfjCqyMWLpk"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-ConnectLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectLambdaVersionO7j8IT14rWcbVvFaugcjCxH4I8WKilyDgome7y8FqQ"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-DisconnectLambdaFunctionQualifiedArn"
            }
          },
          "RefreshLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshLambdaVersionNQI8aoI1dy0zTXWVelnmCYnIcNoWx3Q7tvqAhXTnN4"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-RefreshLambdaFunctionQualifiedArn"
            }
          },
          "SendTemporaryPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendTemporaryPasswordLambdaVersionxzJuMgGRwiGyZwk8lY8TzvbqUB6QKj8xqgRMm51M4"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-SendTemporaryPasswordLambdaFunctionQualifiedArn"
            }
          },
          "UploadFilesToS3LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFilesToS3LambdaVersion8YlhL83tYmfyZdE4oqDkHyz7OonHdKn1S6A8c3ZgI"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-UploadFilesToS3LambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-emotioX-backend-dev-HttpApiUrl"
            }
          },
          "ApiUrl": {
            "Description": "URL base de la API desplegada",
            "Value": {
              "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            }
          },
          "WebSocketApiEndpoint": {
            "Description": "WebSocket API Endpoint",
            "Value": {
              "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "Export": {
              "Name": "WebSocketApiEndpoint-dev"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-offline",
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "registerUser": {
        "handler": "dist/controllers/controller.registerUser",
        "events": [
          {
            "httpApi": {
              "path": "/register",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/register"
          }
        ],
        "name": "emotioX-backend-dev-registerUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersionflvDdc9NGDPDzCLE5YCXNjbdPW389b5AvlL2w6BJk"
      },
      "getAllUsers": {
        "handler": "dist/controllers/controller.getAllUsers",
        "events": [
          {
            "httpApi": {
              "path": "/get-all-users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-all-users"
          }
        ],
        "name": "emotioX-backend-dev-getAllUsers",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersioniWevh7z3LxNRQ730YF6cjdQbEO0vWhfGpYvwp4eP0"
      },
      "getUserById": {
        "handler": "dist/controllers/controller.getUserById",
        "events": [
          {
            "httpApi": {
              "path": "/get-user/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/get-user/{id}"
          }
        ],
        "name": "emotioX-backend-dev-getUserById",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIdLambdaVersion27eEvS9wrq6nd5fa53aTA7GD2pVertBM1CnjnyXXBU"
      },
      "deleteUserById": {
        "handler": "dist/controllers/controller.deleteUserById",
        "events": [
          {
            "httpApi": {
              "path": "/delete-user/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/delete-user/{id}"
          }
        ],
        "name": "emotioX-backend-dev-deleteUserById",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserByIdLambdaVersioneBB0YQA0dh35tr7vfdIm5gYszxT4yUjx3AzTPDOac"
      },
      "updateUserById": {
        "handler": "dist/controllers/controller.updateUserById",
        "events": [
          {
            "httpApi": {
              "path": "/update-user/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/update-user/{id}"
          }
        ],
        "name": "emotioX-backend-dev-updateUserById",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserByIdLambdaVersionAJCHkZVGaI5mW6OwX69jt4oPvUqGXJS6SBUnWg133E"
      },
      "loginUser": {
        "handler": "dist/controllers/controller.loginUser",
        "events": [
          {
            "httpApi": {
              "path": "/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/login"
          }
        ],
        "name": "emotioX-backend-dev-loginUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersionyX0pEx83ccM6kAIeY9xgMFQAYzrFTE1CnCnZ4"
      },
      "logoutUser": {
        "handler": "dist/controllers/controller.logoutUser",
        "events": [
          {
            "httpApi": {
              "path": "/logout",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/logout"
          }
        ],
        "name": "emotioX-backend-dev-logoutUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LogoutUserLambdaVersionwB01zuTaguHID6kXZfDdU4AhLJzqHl8t4hQ0OYykddI"
      },
      "refreshToken": {
        "handler": "dist/controllers/controller.refreshToken",
        "events": [
          {
            "httpApi": {
              "path": "/refresh-token",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/refresh-token"
          }
        ],
        "name": "emotioX-backend-dev-refreshToken",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokenLambdaVersionHdBFKnSQTQuAyd5AmdJS2CpYaRPEmh0q5E20kHTrY"
      },
      "createResearch": {
        "handler": "dist/controllers/createResearchController.createResearchWithImages",
        "events": [
          {
            "http": {
              "path": "research/create-research",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "emotioX-backend-dev-createResearch",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateResearchLambdaVersionhzAIkWMO2d6MnkzhxMB1S9mVLzkGJzE6ekbdoRVPM"
      },
      "generatePresignedUrls": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "http": {
              "path": "research/generate-presigned-urls",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "emotioX-backend-dev-generatePresignedUrls",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GeneratePresignedUrlsLambdaVersionZAOf8NzvL2EbyufJHWhMXx9292DXixYvYGTCwq7E0"
      },
      "connect": {
        "handler": "dist/websocket/connectHandler.connectHandler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "emotioX-backend-dev-connect",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectLambdaVersion9eHcmK3wYFrccpO7PVToo2txzdErXhSfjCqyMWLpk"
      },
      "disconnect": {
        "handler": "dist/websocket/disconnectHandler.disconnectHandler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "emotioX-backend-dev-disconnect",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DisconnectLambdaVersionO7j8IT14rWcbVvFaugcjCxH4I8WKilyDgome7y8FqQ"
      },
      "refresh": {
        "handler": "src/websocket/refreshHandler.refreshHandler",
        "events": [
          {
            "websocket": {
              "route": "refresh"
            }
          },
          {
            "schedule": {
              "rate": [
                "rate(15 minutes)"
              ]
            }
          }
        ],
        "name": "emotioX-backend-dev-refresh",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshLambdaVersionNQI8aoI1dy0zTXWVelnmCYnIcNoWx3Q7tvqAhXTnN4"
      },
      "sendTemporaryPassword": {
        "handler": "dist/controllers/controller.sendTemporaryPassword",
        "events": [
          {
            "httpApi": {
              "path": "/send-temporary-password",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/send-temporary-password"
          }
        ],
        "name": "emotioX-backend-dev-sendTemporaryPassword",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendTemporaryPasswordLambdaVersionxzJuMgGRwiGyZwk8lY8TzvbqUB6QKj8xqgRMm51M4"
      },
      "uploadFilesToS3": {
        "handler": "dist/controllers/imageController.uploadFilesToS3",
        "events": [
          {
            "httpApi": {
              "path": "/upload-image",
              "method": "post",
              "cors": {
                "origin": "http://localhost:5173",
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "allowCredentials": true
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/upload-image"
          }
        ],
        "name": "emotioX-backend-dev-uploadFilesToS3",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UploadFilesToS3LambdaVersion8YlhL83tYmfyZdE4oqDkHyz7OonHdKn1S6A8c3ZgI"
      }
    },
    "resources": {
      "Resources": {
        "ApiGatewayLoggingRoleAuthBackend": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "api-gateway-emotioX-backend",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "apigateway.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
          }
        },
        "ResearchImagesBucket": {
          "Type": "AWS::S3::Bucket",
          "DeletionPolicy": "Retain",
          "Properties": {
            "BucketName": "emotiox-backend-dev-bucket",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "WebSocketConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "emotioX-backend-dev-WebSocketConnections",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WebSocketApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "emotioX-backend-dev-WebSocketApi",
            "ProtocolType": "WEBSOCKET",
            "RouteSelectionExpression": "$request.body.action"
          }
        }
      },
      "Outputs": {
        "ApiUrl": {
          "Description": "URL base de la API desplegada",
          "Value": {
            "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
          }
        },
        "WebSocketApiEndpoint": {
          "Description": "WebSocket API Endpoint",
          "Value": {
            "Fn::Sub": "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
          },
          "Export": {
            "Name": "WebSocketApiEndpoint-dev"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "emotioX-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/carriagada/Desktop/emotioX/backend/.build/.serverless/emotioX-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/emotioX-backend/dev/1733239743696-2024-12-03T15:29:03.696Z",
    "artifact": "emotioX-backend.zip"
  }
}