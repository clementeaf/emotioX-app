service: emotio-x-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  profile: default
  websocketsApiName: dev-emotio-x-backend-websockets
  websocketsApiRouteSelectionExpression: $request.body.action
  logs:
    httpApi:
      format: '$context.identity.sourceIp - $context.httpMethod $context.routeKey $context.status - $context.requestId'
    websocket: true

  httpApi:
    cors:
      allowedOrigins:
        - "http://localhost:3000"
      allowedMethods:
        - GET
        - POST
        - DELETE
        - PUT
        - OPTIONS
      allowCredentials: true

  environment:
    CONNECTIONS_TABLE: "${self:service}-${self:provider.stage}-WebSocketConnections"
    WEBSOCKET_ENDPOINT: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    S3_BUCKET_NAME: "${self:custom.s3BucketName}"

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "arn:aws:logs:*:*:*"
        - Effect: "Allow"
          Action: 
            - "execute-api:ManageConnections"
          Resource: 
            - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/@connections/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-WebSocketConnections"
        - Effect: "Allow"
          Action:
            - "ses:SendEmail"
            - "ses:SendRawEmail"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::${self:custom.s3BucketName}"
            - "arn:aws:s3:::${self:custom.s3BucketName}/*"


custom:
  s3BucketName: "${self:service}-${self:provider.stage}-deployment-bucket"
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  exportOutputs:
    fileName: outputs.json
  exportEndpoints:
    fileName: endpoints.json
    include:
      - 'httpApi'
  esbuild:
    bundle: true
    external:
      - argon2


plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

functions:
  registerUser:
    handler: dist/controllers/controller.registerUser
    events:
      - httpApi:
          path: /register
          method: post
  
  getAllUsers:
    handler: dist/controllers/controller.getAllUsers
    events:
      - httpApi:
          path: /get-all-users
          method: get
  
  getUserById:
    handler: dist/controllers/controller.getUserById
    events:
      - httpApi:
          path: /get-user/{id}
          method: get
  
  deleteUserById:
    handler: dist/controllers/controller.deleteUserById
    events:
      - httpApi:
          path: /delete-user/{id}
          method: delete
  
  updateUserById:
    handler: dist/controllers/controller.updateUserById
    events:
      - httpApi:
          path: /update-user/{id}
          method: put
  
  loginUser:
    handler: dist/controllers/controller.loginUser
    events:
      - httpApi:
          path: /login
          method: post
  
  logoutUser:
    handler: dist/controllers/controller.logoutUser
    events:
      - httpApi:
          path: /logout
          method: post
  
  refreshToken:
    handler: dist/controllers/controller.refreshToken
    events:
      - httpApi:
          path: /refresh-token
          method: post

  createResearch:
    handler: dist/controllers/createResearchController.createResearchWithImages
    events:
      - httpApi:
          path: /research/create-research
          method: post
  
  generatePresignedUrls:
    handler: dist/controllers/imageController.uploadFilesToS3
    events:
      - httpApi:
          path: /research/generate-presigned-urls
          method: post

  connect:
    handler: dist/websocket/connectHandler.connectHandler
    events:
      - websocket:
          route: $connect
  
  disconnect:
    handler: dist/websocket/disconnectHandler.disconnectHandler
    events:
      - websocket:
          route: $disconnect

  defaultHandler:
    handler: dist/websocket/defaultHandler.defaultHandler
    events:
      - websocket: $default

  sendMessage:
    handler: dist/websocket/sendMessageHandler.sendMessageHandler
    events:
      - websocket:
          route: sendMessage

  refresh:
    handler: src/websocket/refreshHandler.refreshHandler
    events:
      - websocket:
          route: refresh
      - schedule:
          rate: rate(15 minutes)

  sendTemporaryPassword:
    handler: dist/controllers/controller.sendTemporaryPassword
    events:
      - httpApi:
          path: /send-temporary-password
          method: post

  uploadFilesToS3:
    handler: dist/controllers/imageController.uploadFilesToS3
    events:
      - httpApi:
          path: /upload-image
          method: post

  ### SCREENER ROUTES ###
  # Crear un Screener
  createScreener:
    handler: dist/controllers/screenerController.createScreener
    events:
      - httpApi:
          path: /screener
          method: post

  # Obtener un Screener por el ID de la investigación
  getScreenerByResearch:
    handler: dist/controllers/screenerController.getScreenerByResearch
    events:
      - httpApi:
          path: /screener/{researchId}
          method: get

  # Actualizar un Screener existente
  updateScreener:
    handler: dist/controllers/screenerController.updateScreener
    events:
      - httpApi:
          path: /screener/{researchId}
          method: put

  # Eliminar un Screener por su ID
  deleteScreener:
    handler: dist/controllers/screenerController.deleteScreener
    events:
      - httpApi:
          path: /screener/{screenerId}
          method: delete

  
  ### WELCOME SCREENER ROUTES ###
  functions:
  # Crear una WelcomeScreen
  createWelcomeScreen:
    handler: dist/controllers/welcomeScreenController.createWelcomeScreen
    events:
      - httpApi:
          path: /welcome-screen
          method: post

  # Obtener una WelcomeScreen por el ID de investigación
  getWelcomeScreenByResearch:
    handler: dist/controllers/welcomeScreenController.getWelcomeScreenByResearch
    events:
      - httpApi:
          path: /welcome-screen/{researchId}
          method: get

  # Actualizar una WelcomeScreen existente
  updateWelcomeScreen:
    handler: dist/controllers/welcomeScreenController.updateWelcomeScreen
    events:
      - httpApi:
          path: /welcome-screen/{researchId}
          method: put

  # Eliminar una WelcomeScreen por su ID
  deleteWelcomeScreen:
    handler: dist/controllers/welcomeScreenController.deleteWelcomeScreen
    events:
      - httpApi:
          path: /welcome-screen/{welcomeScreenId}
          method: delete

  ### IMPLICIT ASSOCIATION ###
  # Crear un ImplicitAssociation
  createImplicitAssociation:
    handler: dist/controllers/implicitAssociationController.createImplicitAssociation
    events:
      - httpApi:
          path: /implicit-association
          method: post

  # Obtener un ImplicitAssociation por su ID
  getImplicitAssociationById:
    handler: dist/controllers/implicitAssociationController.getImplicitAssociationById
    events:
      - httpApi:
          path: /implicit-association/{id}
          method: get

  # Actualizar un ImplicitAssociation existente
  updateImplicitAssociation:
    handler: dist/controllers/implicitAssociationController.updateImplicitAssociation
    events:
      - httpApi:
          path: /implicit-association/{id}
          method: put

  # Eliminar un ImplicitAssociation por su ID
  deleteImplicitAssociation:
    handler: dist/controllers/implicitAssociationController.deleteImplicitAssociation
    events:
      - httpApi:
          path: /implicit-association/{id}
          method: delete

  ### COGNITIVE TASK ###
  # Crear una Cognitive Task
  createCognitiveTask:
    handler: dist/controllers/cognitiveTaskController.createCognitiveTask
    events:
      - httpApi:
          path: /cognitive-task
          method: post

  # Obtener una Cognitive Task por su ID
  getCognitiveTaskById:
    handler: dist/controllers/cognitiveTaskController.getCognitiveTaskById
    events:
      - httpApi:
          path: /cognitive-task/{id}
          method: get

  # Actualizar una Cognitive Task existente
  updateCognitiveTask:
    handler: dist/controllers/cognitiveTaskController.updateCognitiveTask
    events:
      - httpApi:
          path: /cognitive-task/{id}
          method: put

  # Eliminar una Cognitive Task por su ID
  deleteCognitiveTask:
    handler: dist/controllers/cognitiveTaskController.deleteCognitiveTask
    events:
      - httpApi:
          path: /cognitive-task/{id}
          method: delete


resources:
  Resources:
    WebSocketLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/aws/websocket/${self:service}-${self:provider.stage}-${opt:timestamp, 'unique'}"
        RetentionInDays: 14
    DeploymentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.s3BucketName}"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedHeaders:
                - "*"
              MaxAge: 3000

    ApiGatewayLoggingRoleAuthBackend:
      Type: AWS::IAM::Role
      Properties:
        RoleName: api-gateway-emotioX-backend
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
    
    ResearchImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "emotiox-backend-dev-bucket"
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedHeaders:
                - "*"
              MaxAge: 3000

    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:provider.stage}-WebSocketConnections"
        AttributeDefinitions:
          - AttributeName: "connectionId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "connectionId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: "${self:service}-${self:provider.stage}-WebSocketApi"
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

  Outputs:
    ApiUrl:
      Description: "URL base de la API desplegada"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    WelcomeScreenApiUrl:
      Description: "URL para las rutas de WelcomeScreen"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/welcome-screen"
    ScreenerApiUrl:
      Description: "URL para las rutas de Screener"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/screener"
    ImplicitAssociationApiUrl:
      Description: "URL para las rutas de Implicit Association"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/implicit-association"
    CognitiveTaskApiUrl:
      Description: "URL para las rutas de Cognitive Task"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/cognitive-task"
    WebSocketApiEndpoint:
      Description: "WebSocket API Endpoint"
      Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    S3BucketName:
      Description: "Nombre del bucket de S3 para este entorno"
      Value: !Ref DeploymentBucket
      
